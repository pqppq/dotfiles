{
	"terraform": {
		"prefix": "terraform",
		"body": [
			"terraform {",
			"	required_providers {",
			"		aws = {",
			"			source = \"hashicorp/aws\"",
			"			version = \"~> 5.0\"",
			"		}",
			"	}",
			"}"
		]
	},
	"provider": {
		"prefix": "provider",
		"body": [
			"provider \"aws\" {",
			"	region = \"\"",
			"}"
		]
	},
	"api_gateway_account": {
		"prefix": "api_gateway_account",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_account",
			"resource \"aws_api_gateway_account\" \"demo\" {",
			"  cloudwatch_role_arn = aws_iam_role.cloudwatch.arn",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"assume_role\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"apigateway.amazonaws.com\"]",
			"    }",
			"",
			"    actions = [\"sts:AssumeRole\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role\" \"cloudwatch\" {",
			"  name               = \"api_gateway_cloudwatch_global\"",
			"  assume_role_policy = data.aws_iam_policy_document.assume_role.json",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"cloudwatch\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    actions = [",
			"      \"logs:CreateLogGroup\",",
			"      \"logs:CreateLogStream\",",
			"      \"logs:DescribeLogGroups\",",
			"      \"logs:DescribeLogStreams\",",
			"      \"logs:PutLogEvents\",",
			"      \"logs:GetLogEvents\",",
			"      \"logs:FilterLogEvents\",",
			"    ]",
			"",
			"    resources = [\"*\"]",
			"  }",
			"}",
			"resource \"aws_iam_role_policy\" \"cloudwatch\" {",
			"  name   = \"default\"",
			"  role   = aws_iam_role.cloudwatch.id",
			"  policy = data.aws_iam_policy_document.cloudwatch.json",
			"}"
		]
	},
	"api_gateway_api_key": {
		"prefix": "api_gateway_api_key",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_api_key",
			"resource \"aws_api_gateway_api_key\" \"MyDemoApiKey\" {",
			"  name = \"demo\"",
			"}"
		]
	},
	"api_gateway_authorizer": {
		"prefix": "api_gateway_authorizer",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_authorizer",
			"resource \"aws_api_gateway_authorizer\" \"demo\" {",
			"  name                   = \"demo\"",
			"  rest_api_id            = aws_api_gateway_rest_api.demo.id",
			"  authorizer_uri         = aws_lambda_function.authorizer.invoke_arn",
			"  authorizer_credentials = aws_iam_role.invocation_role.arn",
			"}",
			"",
			"resource \"aws_api_gateway_rest_api\" \"demo\" {",
			"  name = \"auth-demo\"",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"invocation_assume_role\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"apigateway.amazonaws.com\"]",
			"    }",
			"",
			"    actions = [\"sts:AssumeRole\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role\" \"invocation_role\" {",
			"  name               = \"api_gateway_auth_invocation\"",
			"  path               = \"/\"",
			"  assume_role_policy = data.aws_iam_policy_document.invocation_assume_role.json",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"invocation_policy\" {",
			"  statement {",
			"    effect    = \"Allow\"",
			"    actions   = [\"lambda:InvokeFunction\"]",
			"    resources = [aws_lambda_function.authorizer.arn]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role_policy\" \"invocation_policy\" {",
			"  name   = \"default\"",
			"  role   = aws_iam_role.invocation_role.id",
			"  policy = data.aws_iam_policy_document.invocation_policy.json",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"lambda_assume_role\" {",
			"  statement {",
			"    effect  = \"Allow\"",
			"    actions = [\"sts:AssumeRole\"]",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"lambda.amazonaws.com\"]",
			"    }",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role\" \"lambda\" {",
			"  name               = \"demo-lambda\"",
			"  assume_role_policy = data.aws_iam_policy_document.lambda_assume_role.json",
			"}",
			"",
			"resource \"aws_lambda_function\" \"authorizer\" {",
			"  filename      = \"lambda-function.zip\"",
			"  function_name = \"api_gateway_authorizer\"",
			"  role          = aws_iam_role.lambda.arn",
			"  handler       = \"exports.example\"",
			"",
			"  source_code_hash = filebase64sha256(\"lambda-function.zip\")",
			"}"
		]
	},
	"api_gateway_client_certificate": {
		"prefix": "api_gateway_client_certificate",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_client_certificate",
			"resource \"aws_api_gateway_client_certificate\" \"demo\" {",
			"  description = \"My client certificate\"",
			"}"
		]
	},
	"api_gateway_documentation_part": {
		"prefix": "api_gateway_documentation_part",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_documentation_part",
			"resource \"aws_api_gateway_documentation_part\" \"example\" {",
			"  location {",
			"    type   = \"METHOD\"",
			"    method = \"GET\"",
			"    path   = \"/example\"",
			"  }",
			"",
			"  properties  = \"{\"description\":\"Example description\"}\"",
			"  rest_api_id = aws_api_gateway_rest_api.example.id",
			"}",
			"",
			"resource \"aws_api_gateway_rest_api\" \"example\" {",
			"  name = \"example_api\"",
			"}"
		]
	},
	"api_gateway_documentation_version": {
		"prefix": "api_gateway_documentation_version",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_documentation_version",
			"resource \"aws_api_gateway_documentation_version\" \"example\" {",
			"  version     = \"example_version\"",
			"  rest_api_id = aws_api_gateway_rest_api.example.id",
			"  description = \"Example description\"",
			"  depends_on  = [aws_api_gateway_documentation_part.example]",
			"}",
			"",
			"resource \"aws_api_gateway_rest_api\" \"example\" {",
			"  name = \"example_api\"",
			"}",
			"",
			"resource \"aws_api_gateway_documentation_part\" \"example\" {",
			"  location {",
			"    type = \"API\"",
			"  }",
			"",
			"  properties  = \"{\"description\":\"Example\"}\"",
			"  rest_api_id = aws_api_gateway_rest_api.example.id",
			"}"
		]
	},
	"api_gateway_domain_name": {
		"prefix": "api_gateway_domain_name",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_domain_name",
			"resource \"aws_api_gateway_domain_name\" \"example\" {",
			"  certificate_arn = aws_acm_certificate_validation.example.certificate_arn",
			"  domain_name     = \"api.example.com\"",
			"}",
			"",
			"# Example DNS record using Route53.",
			"# Route53 is not specifically required; any DNS host can be used.",
			"resource \"aws_route53_record\" \"example\" {",
			"  name    = aws_api_gateway_domain_name.example.domain_name",
			"  type    = \"A\"",
			"  zone_id = aws_route53_zone.example.id",
			"",
			"  alias {",
			"    evaluate_target_health = true",
			"    name                   = aws_api_gateway_domain_name.example.cloudfront_domain_name",
			"    zone_id                = aws_api_gateway_domain_name.example.cloudfront_zone_id",
			"  }",
			"}"
		]
	},
	"api_gateway_method_settings": {
		"prefix": "api_gateway_method_settings",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_method_settings",
			"resource \"aws_api_gateway_method_settings\" \"path_specific\" {",
			"  rest_api_id = aws_api_gateway_rest_api.example.id",
			"  stage_name  = aws_api_gateway_stage.example.stage_name",
			"  method_path = \"path1/GET\"",
			"",
			"  settings {",
			"    logging_level = \"OFF\"",
			"  }",
			"}"
		]
	},
	"api_gateway_request_validator": {
		"prefix": "api_gateway_request_validator",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_request_validator",
			"resource \"aws_api_gateway_request_validator\" \"example\" {",
			"  name                        = \"example\"",
			"  rest_api_id                 = aws_api_gateway_rest_api.example.id",
			"  validate_request_body       = true",
			"  validate_request_parameters = true",
			"}"
		]
	},
	"api_gateway_rest_api": {
		"prefix": "api_gateway_rest_api",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_rest_api",
			"resource \"aws_api_gateway_rest_api\" \"example\" {",
			"  body = jsonencode({",
			"    openapi = \"3.0.1\"",
			"    info = {",
			"      title   = \"example\"",
			"      version = \"1.0\"",
			"    }",
			"    paths = {",
			"      \"/path1\" = {",
			"        get = {",
			"          x-amazon-apigateway-integration = {",
			"            httpMethod           = \"GET\"",
			"            payloadFormatVersion = \"1.0\"",
			"            type                 = \"HTTP_PROXY\"",
			"            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"",
			"          }",
			"        }",
			"      }",
			"    }",
			"  })",
			"",
			"  name = \"example\"",
			"",
			"  endpoint_configuration {",
			"    types = [\"REGIONAL\"]",
			"  }",
			"}",
			"",
			"resource \"aws_api_gateway_deployment\" \"example\" {",
			"  rest_api_id = aws_api_gateway_rest_api.example.id",
			"",
			"  triggers = {",
			"    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))",
			"  }",
			"",
			"  lifecycle {",
			"    create_before_destroy = true",
			"  }",
			"}",
			"",
			"resource \"aws_api_gateway_stage\" \"example\" {",
			"  deployment_id = aws_api_gateway_deployment.example.id",
			"  rest_api_id   = aws_api_gateway_rest_api.example.id",
			"  stage_name    = \"example\"",
			"}"
		]
	},
	"apigatewayv2_api": {
		"prefix": "apigatewayv2_api",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_api",
			"resource \"aws_apigatewayv2_api\" \"example\" {",
			"  name                       = \"example-websocket-api\"",
			"  protocol_type              = \"WEBSOCKET\"",
			"  route_selection_expression = \"$request.body.action\"",
			"}"
		]
	},
	"apigatewayv2_api_mapping": {
		"prefix": "apigatewayv2_api_mapping",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_api_mapping",
			"resource \"aws_apigatewayv2_api_mapping\" \"example\" {",
			"  api_id      = aws_apigatewayv2_api.example.id",
			"  domain_name = aws_apigatewayv2_domain_name.example.id",
			"  stage       = aws_apigatewayv2_stage.example.id",
			"}"
		]
	},
	"apigatewayv2_authorizer": {
		"prefix": "apigatewayv2_authorizer",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_authorizer",
			"resource \"aws_apigatewayv2_authorizer\" \"example\" {",
			"  api_id           = aws_apigatewayv2_api.example.id",
			"  authorizer_type  = \"REQUEST\"",
			"  authorizer_uri   = aws_lambda_function.example.invoke_arn",
			"  identity_sources = [\"route.request.header.Auth\"]",
			"  name             = \"example-authorizer\"",
			"}"
		]
	},
	"apigatewayv2_deployment": {
		"prefix": "apigatewayv2_deployment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_deployment",
			"resource \"aws_apigatewayv2_deployment\" \"example\" {",
			"  api_id      = aws_apigatewayv2_api.example.id",
			"  description = \"Example deployment\"",
			"",
			"  lifecycle {",
			"    create_before_destroy = true",
			"  }",
			"}"
		]
	},
	"apigatewayv2_domain_name": {
		"prefix": "apigatewayv2_domain_name",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_domain_name",
			"resource \"aws_apigatewayv2_domain_name\" \"example\" {",
			"  domain_name = \"ws-api.example.com\"",
			"",
			"  domain_name_configuration {",
			"    certificate_arn = aws_acm_certificate.example.arn",
			"    endpoint_type   = \"REGIONAL\"",
			"    security_policy = \"TLS_1_2\"",
			"  }",
			"}"
		]
	},
	"apigatewayv2_integration": {
		"prefix": "apigatewayv2_integration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_integration",
			"resource \"aws_apigatewayv2_integration\" \"example\" {",
			"  api_id           = aws_apigatewayv2_api.example.id",
			"  integration_type = \"MOCK\"",
			"}"
		]
	},
	"apigatewayv2_integration_response": {
		"prefix": "apigatewayv2_integration_response",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_integration_response",
			"resource \"aws_apigatewayv2_integration_response\" \"example\" {",
			"  api_id                   = aws_apigatewayv2_api.example.id",
			"  integration_id           = aws_apigatewayv2_integration.example.id",
			"  integration_response_key = \"/200/\"",
			"}"
		]
	},
	"apigatewayv2_model": {
		"prefix": "apigatewayv2_model",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_model",
			"resource \"aws_apigatewayv2_model\" \"example\" {",
			"  api_id       = aws_apigatewayv2_api.example.id",
			"  content_type = \"application/json\"",
			"  name         = \"example\"",
			"",
			"  schema = jsonencode({",
			"    \"$schema\" = \"http://json-schema.org/draft-04/schema#\"",
			"    title     = \"ExampleModel\"",
			"    type      = \"object\"",
			"",
			"    properties = {",
			"      id = {",
			"        type = \"string\"",
			"      }",
			"    }",
			"  })",
			"}"
		]
	},
	"apigatewayv2_route_response": {
		"prefix": "apigatewayv2_route_response",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_route_response",
			"resource \"aws_apigatewayv2_route_response\" \"example\" {",
			"  api_id             = aws_apigatewayv2_api.example.id",
			"  route_id           = aws_apigatewayv2_route.example.id",
			"  route_response_key = \"$default\"",
			"}"
		]
	},
	"apigatewayv2_stage": {
		"prefix": "apigatewayv2_stage",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_stage",
			"resource \"aws_apigatewayv2_stage\" \"example\" {",
			"  api_id = aws_apigatewayv2_api.example.id",
			"  name   = \"example-stage\"",
			"}"
		]
	},
	"apigatewayv2_vpc_link": {
		"prefix": "apigatewayv2_vpc_link",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_vpc_link",
			"resource \"aws_apigatewayv2_vpc_link\" \"example\" {",
			"  name               = \"example\"",
			"  security_group_ids = [data.aws_security_group.example.id]",
			"  subnet_ids         = data.aws_subnets.example.ids",
			"",
			"  tags = {",
			"    Usage = \"example\"",
			"  }",
			"}"
		]
	},
	"apprunner_vpc_connector": {
		"prefix": "apprunner_vpc_connector",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apprunner_vpc_connector",
			"resource \"aws_apprunner_vpc_connector\" \"connector\" {",
			"  vpc_connector_name = \"name\"",
			"  subnets            = [\"subnet1\", \"subnet2\"]",
			"  security_groups    = [\"sg1\", \"sg2\"]",
			"}"
		]
	},
	"apprunner_vpc_ingress_connection": {
		"prefix": "apprunner_vpc_ingress_connection",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apprunner_vpc_ingress_connection",
			"resource \"aws_apprunner_vpc_ingress_connection\" \"example\" {",
			"  name        = \"example\"",
			"  service_arn = aws_apprunner_service.example.arn",
			"",
			"  ingress_vpc_configuration {",
			"    vpc_id          = aws_default_vpc.default.id",
			"    vpc_endpoint_id = aws_vpc_endpoint.apprunner.id",
			"  }",
			"",
			"  tags = {",
			"    foo = \"bar\"",
			"  }",
			"}",
			""
		]
	},
	"auditmanager_assessment": {
		"prefix": "auditmanager_assessment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/auditmanager_assessment",
			"resource \"aws_auditmanager_assessment\" \"test\" {",
			"  name = \"example\"",
			"",
			"  assessment_reports_destination {",
			"    destination      = \"s3://${aws_s3_bucket.test.id}\"",
			"    destination_type = \"S3\"",
			"  }",
			"",
			"  framework_id = aws_auditmanager_framework.test.id",
			"",
			"  roles {",
			"    role_arn  = aws_iam_role.test.arn",
			"    role_type = \"PROCESS_OWNER\"",
			"  }",
			"",
			"  scope {",
			"    aws_accounts {",
			"      id = data.aws_caller_identity.current.account_id",
			"    }",
			"    aws_services {",
			"      service_name = \"S3\"",
			"    }",
			"  }",
			"}"
		]
	},
	"auditmanager_assessment_delegation": {
		"prefix": "auditmanager_assessment_delegation",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/auditmanager_assessment_delegation",
			"resource \"aws_auditmanager_assessment_delegation\" \"example\" {",
			"  assessment_id  = aws_auditmanager_assessment.example.id",
			"  role_arn       = aws_iam_role.example.arn",
			"  role_type      = \"RESOURCE_OWNER\"",
			"  control_set_id = \"example\"",
			"}"
		]
	},
	"auditmanager_assessment_report": {
		"prefix": "auditmanager_assessment_report",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/auditmanager_assessment_report",
			"resource \"aws_auditmanager_assessment_report\" \"test\" {",
			"  name          = \"example\"",
			"  assessment_id = aws_auditmanager_assessment.test.id",
			"}"
		]
	},
	"batch_compute_environment": {
		"prefix": "batch_compute_environment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/batch_compute_environment",
			"resource \"aws_batch_compute_environment\" \"sample\" {",
			"  compute_environment_name = \"sample\"",
			"",
			"  compute_resources {",
			"    max_vcpus = 16",
			"",
			"    security_group_ids = [",
			"      aws_security_group.sample.id",
			"    ]",
			"",
			"    subnets = [",
			"      aws_subnet.sample.id",
			"    ]",
			"",
			"    type = \"FARGATE\"",
			"  }",
			"",
			"  service_role = aws_iam_role.aws_batch_service_role.arn",
			"  type         = \"MANAGED\"",
			"  depends_on   = [aws_iam_role_policy_attachment.aws_batch_service_role]",
			"}"
		]
	},
	"batch_job_definition": {
		"prefix": "batch_job_definition",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/batch_job_definition",
			"resource \"aws_batch_job_definition\" \"test\" {",
			"  name = \"tf_test_batch_job_definition\"",
			"  type = \"container\"",
			"  container_properties = jsonencode({",
			"    command = [\"ls\", \"-la\"],",
			"    image   = \"busybox\"",
			"",
			"    resourceRequirements = [",
			"      {",
			"        type  = \"VCPU\"",
			"        value = \"0.25\"",
			"      },",
			"      {",
			"        type  = \"MEMORY\"",
			"        value = \"512\"",
			"      }",
			"    ]",
			"",
			"    volumes = [",
			"      {",
			"        host = {",
			"          sourcePath = \"/tmp\"",
			"        }",
			"        name = \"tmp\"",
			"      }",
			"    ]",
			"",
			"    environment = [",
			"      {",
			"        name  = \"VARNAME\"",
			"        value = \"VARVAL\"",
			"      }",
			"    ]",
			"",
			"    mountPoints = [",
			"      {",
			"        sourceVolume  = \"tmp\"",
			"        containerPath = \"/tmp\"",
			"        readOnly      = false",
			"      }",
			"    ]",
			"",
			"    ulimits = [",
			"      {",
			"        hardLimit = 1024",
			"        name      = \"nofile\"",
			"        softLimit = 1024",
			"      }",
			"    ]",
			"  })",
			"}"
		]
	},
	"batch_job_queue": {
		"prefix": "batch_job_queue",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/batch_job_queue",
			"resource \"aws_batch_job_queue\" \"test_queue\" {",
			"  name     = \"tf-test-batch-job-queue\"",
			"  state    = \"ENABLED\"",
			"  priority = 1",
			"  compute_environments = [",
			"    aws_batch_compute_environment.test_environment_1.arn,",
			"    aws_batch_compute_environment.test_environment_2.arn,",
			"  ]",
			"}"
		]
	},
	"batch_scheduling_policy": {
		"prefix": "batch_scheduling_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/batch_scheduling_policy",
			"resource \"aws_batch_scheduling_policy\" \"example\" {",
			"  name = \"example\"",
			"",
			"  fair_share_policy {",
			"    compute_reservation = 1",
			"    share_decay_seconds = 3600",
			"",
			"    share_distribution {",
			"      share_identifier = \"A1*\"",
			"      weight_factor    = 0.1",
			"    }",
			"",
			"    share_distribution {",
			"      share_identifier = \"A2\"",
			"      weight_factor    = 0.2",
			"    }",
			"  }",
			"",
			"  tags = {",
			"    \"Name\" = \"Example Batch Scheduling Policy\"",
			"  }",
			"}"
		]
	},
	"cloud9_environment_ec2": {
		"prefix": "cloud9_environment_ec2",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloud9_environment_ec2",
			"resource \"aws_cloud9_environment_ec2\" \"example\" {",
			"  instance_type = \"t2.micro\"",
			"  name          = \"example-env\"",
			"}"
		]
	},
	"cloudfront_cache_policy": {
		"prefix": "cloudfront_cache_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_cache_policy",
			"resource \"aws_cloudfront_cache_policy\" \"example\" {",
			"  name        = \"example-policy\"",
			"  comment     = \"test comment\"",
			"  default_ttl = 50",
			"  max_ttl     = 100",
			"  min_ttl     = 1",
			"  parameters_in_cache_key_and_forwarded_to_origin {",
			"    cookies_config {",
			"      cookie_behavior = \"whitelist\"",
			"      cookies {",
			"        items = [\"example\"]",
			"      }",
			"    }",
			"    headers_config {",
			"      header_behavior = \"whitelist\"",
			"      headers {",
			"        items = [\"example\"]",
			"      }",
			"    }",
			"    query_strings_config {",
			"      query_string_behavior = \"whitelist\"",
			"      query_strings {",
			"        items = [\"example\"]",
			"      }",
			"    }",
			"  }",
			"}"
		]
	},
	"cloudfront_continuous_deployment_policy": {
		"prefix": "cloudfront_continuous_deployment_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_continuous_deployment_policy",
			"resource \"aws_cloudfront_continuous_deployment_policy\" \"example\" {",
			"  enabled = true",
			"",
			"  staging_distribution_dns_names {",
			"    items    = [aws_cloudfront_distribution.staging.domain_name]",
			"    quantity = 1",
			"  }",
			"",
			"  traffic_config {",
			"    type = \"SingleWeight\"",
			"    single_weight_config {",
			"      weight = \"0.01\"",
			"      session_stickiness_config {",
			"        idle_ttl    = 300",
			"        maximum_ttl = 600",
			"      }",
			"    }",
			"  }",
			"}"
		]
	},
	"cloudfront_distribution": {
		"prefix": "cloudfront_distribution",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_distribution",
			"resource \"aws_cloudfront_distribution\" \"s3_distribution\" {",
			"  origin_group {",
			"    origin_id = \"groupS3\"",
			"",
			"    failover_criteria {",
			"      status_codes = [403, 404, 500, 502]",
			"    }",
			"",
			"    member {",
			"      origin_id = \"primaryS3\"",
			"    }",
			"",
			"    member {",
			"      origin_id = \"failoverS3\"",
			"    }",
			"  }",
			"",
			"  origin {",
			"    domain_name = aws_s3_bucket.primary.bucket_regional_domain_name",
			"    origin_id   = \"primaryS3\"",
			"",
			"    s3_origin_config {",
			"      origin_access_identity = aws_cloudfront_origin_access_identity.default.cloudfront_access_identity_path",
			"    }",
			"  }",
			"",
			"  origin {",
			"    domain_name = aws_s3_bucket.failover.bucket_regional_domain_name",
			"    origin_id   = \"failoverS3\"",
			"",
			"    s3_origin_config {",
			"      origin_access_identity = aws_cloudfront_origin_access_identity.default.cloudfront_access_identity_path",
			"    }",
			"  }",
			"",
			"  default_cache_behavior {",
			"    # ... other configuration ...",
			"    target_origin_id = \"groupS3\"",
			"  }",
			"",
			"  # ... other configuration ...",
			"}"
		]
	},
	"cloudfront_field_level_encryption_config": {
		"prefix": "cloudfront_field_level_encryption_config",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_field_level_encryption_config",
			"resource \"aws_cloudfront_field_level_encryption_config\" \"test\" {",
			"  comment = \"test comment\"",
			"",
			"  content_type_profile_config {",
			"    forward_when_content_type_is_unknown = true",
			"",
			"    content_type_profiles {",
			"      items {",
			"        content_type = \"application/x-www-form-urlencoded\"",
			"        format       = \"URLEncoded\"",
			"      }",
			"    }",
			"  }",
			"",
			"  query_arg_profile_config {",
			"    forward_when_query_arg_profile_is_unknown = true",
			"",
			"    query_arg_profiles {",
			"      items {",
			"        profile_id = aws_cloudfront_field_level_encryption_profile.test.id",
			"        query_arg  = \"Arg1\"",
			"      }",
			"    }",
			"  }",
			"}"
		]
	},
	"cloudfront_function": {
		"prefix": "cloudfront_function",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_function",
			"resource \"aws_cloudfront_function\" \"test\" {",
			"  name    = \"test\"",
			"  runtime = \"cloudfront-js-1.0\"",
			"  comment = \"my function\"",
			"  publish = true",
			"  code    = file(\"${path.module}/function.js\")",
			"}"
		]
	},
	"cloudfront_monitoring_subscription": {
		"prefix": "cloudfront_monitoring_subscription",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_monitoring_subscription",
			"resource \"aws_cloudfront_monitoring_subscription\" \"example\" {",
			"  distribution_id = aws_cloudfront_distribution.example.id",
			"",
			"  monitoring_subscription {",
			"    realtime_metrics_subscription_config {",
			"      realtime_metrics_subscription_status = \"Enabled\"",
			"    }",
			"  }",
			"}"
		]
	},
	"cloudfront_origin_access_control": {
		"prefix": "cloudfront_origin_access_control",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_origin_access_control",
			"resource \"aws_cloudfront_origin_access_control\" \"example\" {",
			"  name                              = \"example\"",
			"  description                       = \"Example Policy\"",
			"  origin_access_control_origin_type = \"s3\"",
			"  signing_behavior                  = \"always\"",
			"  signing_protocol                  = \"sigv4\"",
			"}"
		]
	},
	"cloudfront_origin_access_identity": {
		"prefix": "cloudfront_origin_access_identity",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_origin_access_identity",
			"resource \"aws_cloudfront_origin_access_identity\" \"example\" {",
			"  comment = \"Some comment\"",
			"}"
		]
	},
	"cloudfront_origin_request_policy": {
		"prefix": "cloudfront_origin_request_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_origin_request_policy",
			"resource \"aws_cloudfront_origin_request_policy\" \"example\" {",
			"  name    = \"example-policy\"",
			"  comment = \"example comment\"",
			"  cookies_config {",
			"    cookie_behavior = \"whitelist\"",
			"    cookies {",
			"      items = [\"example\"]",
			"    }",
			"  }",
			"  headers_config {",
			"    header_behavior = \"whitelist\"",
			"    headers {",
			"      items = [\"example\"]",
			"    }",
			"  }",
			"  query_strings_config {",
			"    query_string_behavior = \"whitelist\"",
			"    query_strings {",
			"      items = [\"example\"]",
			"    }",
			"  }",
			"}",
			""
		]
	},
	"cloudfront_public_key": {
		"prefix": "cloudfront_public_key",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_public_key",
			"resource \"aws_cloudfront_public_key\" \"example\" {",
			"  comment     = \"test public key\"",
			"  encoded_key = file(\"public_key.pem\")",
			"  name        = \"test_key\"",
			"}"
		]
	},
	"cloudfront_response_headers_policy": {
		"prefix": "cloudfront_response_headers_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_response_headers_policy",
			"resource \"aws_cloudfront_response_headers_policy\" \"example\" {",
			"  name    = \"example-policy\"",
			"  comment = \"test comment\"",
			"",
			"  cors_config {",
			"    access_control_allow_credentials = true",
			"",
			"    access_control_allow_headers {",
			"      items = [\"test\"]",
			"    }",
			"",
			"    access_control_allow_methods {",
			"      items = [\"GET\"]",
			"    }",
			"",
			"    access_control_allow_origins {",
			"      items = [\"test.example.comtest\"]",
			"    }",
			"",
			"    origin_override = true",
			"  }",
			"}"
		]
	},
	"cloudwatch_composite_alarm": {
		"prefix": "cloudwatch_composite_alarm",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_composite_alarm",
			"resource \"aws_cloudwatch_composite_alarm\" \"example\" {",
			"  alarm_description = \"This is a composite alarm!\"",
			"  alarm_name        = \"example-composite-alarm\"",
			"",
			"  alarm_actions = aws_sns_topic.example.arn",
			"  ok_actions    = aws_sns_topic.example.arn",
			"",
			"  alarm_rule = <<EOF",
			"ALARM(${aws_cloudwatch_metric_alarm.alpha.alarm_name}) OR",
			"ALARM(${aws_cloudwatch_metric_alarm.bravo.alarm_name})",
			"EOF",
			"",
			"  actions_suppressor {",
			"    alarm            = \"suppressor-alarm\"",
			"    extension_period = 10",
			"    wait_period      = 20",
			"  }",
			"}"
		]
	},
	"cloudwatch_dashboard": {
		"prefix": "cloudwatch_dashboard",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_dashboard",
			"resource \"aws_cloudwatch_dashboard\" \"main\" {",
			"  dashboard_name = \"my-dashboard\"",
			"",
			"  dashboard_body = jsonencode({",
			"    widgets = [",
			"      {",
			"        type   = \"metric\"",
			"        x      = 0",
			"        y      = 0",
			"        width  = 12",
			"        height = 6",
			"",
			"        properties = {",
			"          metrics = [",
			"            [",
			"              \"AWS/EC2\",",
			"              \"CPUUtilization\",",
			"              \"InstanceId\",",
			"              \"i-012345\"",
			"            ]",
			"          ]",
			"          period = 300",
			"          stat   = \"Average\"",
			"          region = \"us-east-1\"",
			"          title  = \"EC2 Instance CPU\"",
			"        }",
			"      },",
			"      {",
			"        type   = \"text\"",
			"        x      = 0",
			"        y      = 7",
			"        width  = 3",
			"        height = 3",
			"",
			"        properties = {",
			"          markdown = \"Hello world\"",
			"        }",
			"      }",
			"    ]",
			"  })",
			"}"
		]
	},
	"cloudwatch_event_api_destination": {
		"prefix": "cloudwatch_event_api_destination",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_event_api_destination",
			"resource \"aws_cloudwatch_event_api_destination\" \"test\" {",
			"  name                             = \"api-destination\"",
			"  description                      = \"An API Destination\"",
			"  invocation_endpoint              = \"https://api.destination.com/endpoint\"",
			"  http_method                      = \"POST\"",
			"  invocation_rate_limit_per_second = 20",
			"  connection_arn                   = aws_cloudwatch_event_connection.test.arn",
			"}"
		]
	},
	"cloudwatch_event_bus": {
		"prefix": "cloudwatch_event_bus",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_event_bus",
			"resource \"aws_cloudwatch_event_bus\" \"messenger\" {",
			"  name = \"chat-messages\"",
			"}"
		]
	},
	"cloudwatch_event_connection": {
		"prefix": "cloudwatch_event_connection",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_event_connection",
			"resource \"aws_cloudwatch_event_connection\" \"test\" {",
			"  name               = \"ngrok-connection\"",
			"  description        = \"A connection description\"",
			"  authorization_type = \"API_KEY\"",
			"",
			"  auth_parameters {",
			"    api_key {",
			"      key   = \"x-signature\"",
			"      value = \"1234\"",
			"    }",
			"  }",
			"}"
		]
	},
	"cloudwatch_event_endpoint": {
		"prefix": "cloudwatch_event_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_event_endpoint",
			"resource \"aws_cloudwatch_event_endpoint\" \"this\" {",
			"  name     = \"global-endpoint\"",
			"  role_arn = aws_iam_role.replication.arn",
			"",
			"  event_bus {",
			"    event_bus_arn = aws_cloudwatch_event_bus.primary.arn",
			"  }",
			"  event_bus {",
			"    event_bus_arn = aws_cloudwatch_event_bus.secondary.arn",
			"  }",
			"",
			"  replication_config {",
			"    state = \"DISABLED\"",
			"  }",
			"",
			"  routing_config {",
			"    failover_config {",
			"      primary {",
			"        health_check = aws_route53_health_check.primary.arn",
			"      }",
			"",
			"      secondary {",
			"        route = \"us-east-2\"",
			"      }",
			"    }",
			"  }",
			"}"
		]
	},
	"cloudwatch_event_permission": {
		"prefix": "cloudwatch_event_permission",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_event_permission",
			"resource \"aws_cloudwatch_event_permission\" \"DevAccountAccess\" {",
			"  principal    = \"123456789012\"",
			"  statement_id = \"DevAccountAccess\"",
			"}"
		]
	},
	"cloudwatch_event_rule": {
		"prefix": "cloudwatch_event_rule",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_event_rule",
			"resource \"aws_cloudwatch_event_rule\" \"console\" {",
			"  name        = \"capture-aws-sign-in\"",
			"  description = \"Capture each AWS Console Sign In\"",
			"",
			"  event_pattern = jsonencode({",
			"    detail-type = [",
			"      \"AWS Console Sign In via CloudTrail\"",
			"    ]",
			"  })",
			"}",
			"",
			"resource \"aws_cloudwatch_event_target\" \"sns\" {",
			"  rule      = aws_cloudwatch_event_rule.console.name",
			"  target_id = \"SendToSNS\"",
			"  arn       = aws_sns_topic.aws_logins.arn",
			"}",
			"",
			"resource \"aws_sns_topic\" \"aws_logins\" {",
			"  name = \"aws-console-logins\"",
			"}",
			"",
			"resource \"aws_sns_topic_policy\" \"default\" {",
			"  arn    = aws_sns_topic.aws_logins.arn",
			"  policy = data.aws_iam_policy_document.sns_topic_policy.json",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"sns_topic_policy\" {",
			"  statement {",
			"    effect  = \"Allow\"",
			"    actions = [\"SNS:Publish\"]",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"events.amazonaws.com\"]",
			"    }",
			"",
			"    resources = [aws_sns_topic.aws_logins.arn]",
			"  }",
			"}"
		]
	},
	"cloudwatch_event_target": {
		"prefix": "cloudwatch_event_target",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_event_target",
			"resource \"aws_cloudwatch_event_target\" \"yada\" {",
			"  target_id = \"Yada\"",
			"  rule      = aws_cloudwatch_event_rule.console.name",
			"  arn       = aws_kinesis_stream.test_stream.arn",
			"",
			"  run_command_targets {",
			"    key    = \"tag:Name\"",
			"    values = [\"FooBar\"]",
			"  }",
			"",
			"  run_command_targets {",
			"    key    = \"InstanceIds\"",
			"    values = [\"i-162058cd308bffec2\"]",
			"  }",
			"}",
			"",
			"resource \"aws_cloudwatch_event_rule\" \"console\" {",
			"  name        = \"capture-ec2-scaling-events\"",
			"  description = \"Capture all EC2 scaling events\"",
			"",
			"  event_pattern = jsonencode({",
			"    source = [",
			"      \"aws.autoscaling\"",
			"    ]",
			"",
			"    detail-type = [",
			"      \"EC2 Instance Launch Successful\",",
			"      \"EC2 Instance Terminate Successful\",",
			"      \"EC2 Instance Launch Unsuccessful\",",
			"      \"EC2 Instance Terminate Unsuccessful\"",
			"    ]",
			"  })",
			"}",
			"",
			"resource \"aws_kinesis_stream\" \"test_stream\" {",
			"  name        = \"terraform-kinesis-test\"",
			"  shard_count = 1",
			"}"
		]
	},
	"cloudwatch_log_destination": {
		"prefix": "cloudwatch_log_destination",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_destination",
			"resource \"aws_cloudwatch_log_destination\" \"test_destination\" {",
			"  name       = \"test_destination\"",
			"  role_arn   = aws_iam_role.iam_for_cloudwatch.arn",
			"  target_arn = aws_kinesis_stream.kinesis_for_cloudwatch.arn",
			"}"
		]
	},
	"cloudwatch_log_group": {
		"prefix": "cloudwatch_log_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_group",
			"resource \"aws_cloudwatch_log_group\" \"yada\" {",
			"  name = \"Yada\"",
			"",
			"  tags = {",
			"    Environment = \"production\"",
			"    Application = \"serviceA\"",
			"  }",
			"}"
		]
	},
	"cloudwatch_log_metric_filter": {
		"prefix": "cloudwatch_log_metric_filter",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_metric_filter",
			"resource \"aws_cloudwatch_log_metric_filter\" \"yada\" {",
			"  name           = \"MyAppAccessCount\"",
			"  pattern        = \"\"",
			"  log_group_name = aws_cloudwatch_log_group.dada.name",
			"",
			"  metric_transformation {",
			"    name      = \"EventCount\"",
			"    namespace = \"YourNamespace\"",
			"    value     = \"1\"",
			"  }",
			"}",
			"",
			"resource \"aws_cloudwatch_log_group\" \"dada\" {",
			"  name = \"MyApp/access.log\"",
			"}"
		]
	},
	"cloudwatch_log_subscription_filter": {
		"prefix": "cloudwatch_log_subscription_filter",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_subscription_filter",
			"resource \"aws_cloudwatch_log_subscription_filter\" \"test_lambdafunction_logfilter\" {",
			"  name            = \"test_lambdafunction_logfilter\"",
			"  role_arn        = aws_iam_role.iam_for_lambda.arn",
			"  log_group_name  = \"/aws/lambda/example_lambda_name\"",
			"  filter_pattern  = \"logtype test\"",
			"  destination_arn = aws_kinesis_stream.test_logstream.arn",
			"  distribution    = \"Random\"",
			"}"
		]
	},
	"cloudwatch_metric_alarm": {
		"prefix": "cloudwatch_metric_alarm",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_metric_alarm",
			"resource \"aws_cloudwatch_metric_alarm\" \"foobar\" {",
			"  alarm_name                = \"terraform-test-foobar5\"",
			"  comparison_operator       = \"GreaterThanOrEqualToThreshold\"",
			"  evaluation_periods        = 2",
			"  metric_name               = \"CPUUtilization\"",
			"  namespace                 = \"AWS/EC2\"",
			"  period                    = 120",
			"  statistic                 = \"Average\"",
			"  threshold                 = 80",
			"  alarm_description         = \"This metric monitors ec2 cpu utilization\"",
			"  insufficient_data_actions = []",
			"}"
		]
	},
	"cloudwatch_metric_stream": {
		"prefix": "cloudwatch_metric_stream",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_metric_stream",
			"resource \"aws_cloudwatch_metric_stream\" \"main\" {",
			"  name          = \"my-metric-stream\"",
			"  role_arn      = aws_iam_role.metric_stream_to_firehose.arn",
			"  firehose_arn  = aws_kinesis_firehose_delivery_stream.s3_stream.arn",
			"  output_format = \"json\"",
			"",
			"  include_filter {",
			"    namespace    = \"AWS/EC2\"",
			"    metric_names = [\"CPUUtilization\", \"NetworkOut\"]",
			"  }",
			"",
			"  include_filter {",
			"    namespace    = \"AWS/EBS\"",
			"    metric_names = []",
			"  }",
			"}",
			"",
			"# https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html",
			"data \"aws_iam_policy_document\" \"streams_assume_role\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"streams.metrics.cloudwatch.amazonaws.com\"]",
			"    }",
			"",
			"    actions = [\"sts:AssumeRole\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role\" \"metric_stream_to_firehose\" {",
			"  name               = \"metric_stream_to_firehose_role\"",
			"  assume_role_policy = data.aws_iam_policy_document.streams_assume_role.json",
			"}",
			"",
			"# https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html",
			"data \"aws_iam_policy_document\" \"metric_stream_to_firehose\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    actions = [",
			"      \"firehose:PutRecord\",",
			"      \"firehose:PutRecordBatch\",",
			"    ]",
			"",
			"    resources = [aws_kinesis_firehose_delivery_stream.s3_stream.arn]",
			"  }",
			"}",
			"resource \"aws_iam_role_policy\" \"metric_stream_to_firehose\" {",
			"  name   = \"default\"",
			"  role   = aws_iam_role.metric_stream_to_firehose.id",
			"  policy = data.aws_iam_policy_document.metric_stream_to_firehose.json",
			"}",
			"",
			"resource \"aws_s3_bucket\" \"bucket\" {",
			"  bucket = \"metric-stream-test-bucket\"",
			"}",
			"",
			"resource \"aws_s3_bucket_acl\" \"bucket_acl\" {",
			"  bucket = aws_s3_bucket.bucket.id",
			"  acl    = \"private\"",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"firehose_assume_role\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"firehose.amazonaws.com\"]",
			"    }",
			"",
			"    actions = [\"sts:AssumeRole\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role\" \"firehose_to_s3\" {",
			"  assume_role_policy = data.aws_iam_policy_document.firehose_assume_role.json",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"firehose_to_s3\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    actions = [",
			"      \"s3:AbortMultipartUpload\",",
			"      \"s3:GetBucketLocation\",",
			"      \"s3:GetObject\",",
			"      \"s3:ListBucket\",",
			"      \"s3:ListBucketMultipartUploads\",",
			"      \"s3:PutObject\",",
			"    ]",
			"",
			"    resources = [",
			"      aws_s3_bucket.bucket.arn,",
			"      \"${aws_s3_bucket.bucket.arn}/*\",",
			"    ]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role_policy\" \"firehose_to_s3\" {",
			"  name   = \"default\"",
			"  role   = aws_iam_role.firehose_to_s3.id",
			"  policy = data.aws_iam_policy_document.firehose_to_s3.json",
			"}",
			"",
			"resource \"aws_kinesis_firehose_delivery_stream\" \"s3_stream\" {",
			"  name        = \"metric-stream-test-stream\"",
			"  destination = \"extended_s3\"",
			"",
			"  extended_s3_configuration {",
			"    role_arn   = aws_iam_role.firehose_to_s3.arn",
			"    bucket_arn = aws_s3_bucket.bucket.arn",
			"  }",
			"}"
		]
	},
	"cloudwatch_query_definition": {
		"prefix": "cloudwatch_query_definition",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_query_definition",
			"resource \"aws_cloudwatch_query_definition\" \"example\" {",
			"  name = \"custom_query\"",
			"",
			"  log_group_names = [",
			"    \"/aws/logGroup1\",",
			"    \"/aws/logGroup2\"",
			"  ]",
			"",
			"  query_string = <<EOF",
			"fields @timestamp, @message",
			"| sort @timestamp desc",
			"| limit 25",
			"EOF",
			"}"
		]
	},
	"codeartifact_domain": {
		"prefix": "codeartifact_domain",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codeartifact_domain",
			"resource \"aws_codeartifact_domain\" \"example\" {",
			"  domain = \"example\"",
			"}"
		]
	},
	"codeartifact_repository": {
		"prefix": "codeartifact_repository",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codeartifact_repository",
			"resource \"aws_codeartifact_repository\" \"upstream\" {",
			"  repository = \"upstream\"",
			"  domain     = aws_codeartifact_domain.test.domain",
			"}",
			"",
			"resource \"aws_codeartifact_repository\" \"test\" {",
			"  repository = \"example\"",
			"  domain     = aws_codeartifact_domain.example.domain",
			"",
			"  upstream {",
			"    repository_name = aws_codeartifact_repository.upstream.repository",
			"  }",
			"}"
		]
	},
	"codebuild_source_credential": {
		"prefix": "codebuild_source_credential",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codebuild_source_credential",
			"resource \"aws_codebuild_source_credential\" \"example\" {",
			"  auth_type   = \"PERSONAL_ACCESS_TOKEN\"",
			"  server_type = \"GITHUB\"",
			"  token       = \"example\"",
			"}"
		]
	},
	"codebuild_webhook": {
		"prefix": "codebuild_webhook",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codebuild_webhook",
			"resource \"aws_codebuild_webhook\" \"example\" {",
			"  project_name = aws_codebuild_project.example.name",
			"  build_type   = \"BUILD\"",
			"  filter_group {",
			"    filter {",
			"      type    = \"EVENT\"",
			"      pattern = \"PUSH\"",
			"    }",
			"",
			"    filter {",
			"      type    = \"BASE_REF\"",
			"      pattern = \"master\"",
			"    }",
			"  }",
			"}"
		]
	},
	"codecatalyst_dev_environment": {
		"prefix": "codecatalyst_dev_environment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codecatalyst_dev_environment",
			"resource \"aws_codecatalyst_dev_environment\" \"test\" {",
			"  alias         = \"devenv\"",
			"  space_name    = \"myspace\"",
			"  project_name  = \"myproject\"",
			"  instance_type = \"dev.standard1.small\"",
			"",
			"  persistent_storage {",
			"    size = 16",
			"  }",
			"",
			"  ides {",
			"    name    = \"PyCharm\"",
			"    runtime = \"public.ecr.aws/jetbrains/py\"",
			"  }",
			"",
			"  inactivity_timeout_minutes = 40",
			"",
			"  repositories {",
			"    repository_name = \"terraform-provider-aws\"",
			"    branch_name     = \"main\"",
			"  }",
			"",
			"}"
		]
	},
	"codecatalyst_project": {
		"prefix": "codecatalyst_project",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codecatalyst_project",
			"resource \"aws_codecatalyst_project\" \"test\" {",
			"  space_name   = \"myproject\"",
			"  display_name = \"MyProject\"",
			"  description  = \"My CodeCatalyst Project created using Terraform\"",
			"}"
		]
	},
	"codecatalyst_source_repository": {
		"prefix": "codecatalyst_source_repository",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codecatalyst_source_repository",
			"resource \"aws_codecatalyst_source_repository\" \"example\" {",
			"  name         = \"example-repo\"",
			"  project_name = \"example-project\"",
			"  space_name   = \"example-space\"",
			"}"
		]
	},
	"codecommit_approval_rule_template": {
		"prefix": "codecommit_approval_rule_template",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codecommit_approval_rule_template",
			"resource \"aws_codecommit_approval_rule_template\" \"example\" {",
			"  name        = \"MyExampleApprovalRuleTemplate\"",
			"  description = \"This is an example approval rule template\"",
			"",
			"  content = jsonencode({",
			"    Version               = \"2018-11-08\"",
			"    DestinationReferences = [\"refs/heads/master\"]",
			"    Statements = [{",
			"      Type                    = \"Approvers\"",
			"      NumberOfApprovalsNeeded = 2",
			"      ApprovalPoolMembers     = [\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\"]",
			"    }]",
			"  })",
			"}"
		]
	},
	"codecommit_approval_rule_template_association": {
		"prefix": "codecommit_approval_rule_template_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codecommit_approval_rule_template_association",
			"resource \"aws_codecommit_approval_rule_template_association\" \"example\" {",
			"  approval_rule_template_name = aws_codecommit_approval_rule_template.example.name",
			"  repository_name             = aws_codecommit_repository.example.repository_name",
			"}"
		]
	},
	"codecommit_repository": {
		"prefix": "codecommit_repository",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codecommit_repository",
			"resource \"aws_codecommit_repository\" \"test\" {",
			"  repository_name = \"MyTestRepository\"",
			"  description     = \"This is the Sample App Repository\"",
			"}"
		]
	},
	"codedeploy_app": {
		"prefix": "codedeploy_app",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codedeploy_app",
			"resource \"aws_codedeploy_app\" \"example\" {",
			"  compute_platform = \"ECS\"",
			"  name             = \"example\"",
			"}"
		]
	},
	"codedeploy_deployment_config": {
		"prefix": "codedeploy_deployment_config",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codedeploy_deployment_config",
			"resource \"aws_codedeploy_deployment_config\" \"foo\" {",
			"  deployment_config_name = \"test-deployment-config\"",
			"",
			"  minimum_healthy_hosts {",
			"    type  = \"HOST_COUNT\"",
			"    value = 2",
			"  }",
			"}",
			"",
			"resource \"aws_codedeploy_deployment_group\" \"foo\" {",
			"  app_name               = aws_codedeploy_app.foo_app.name",
			"  deployment_group_name  = \"bar\"",
			"  service_role_arn       = aws_iam_role.foo_role.arn",
			"  deployment_config_name = aws_codedeploy_deployment_config.foo.id",
			"",
			"  ec2_tag_filter {",
			"    key   = \"filterkey\"",
			"    type  = \"KEY_AND_VALUE\"",
			"    value = \"filtervalue\"",
			"  }",
			"",
			"  trigger_configuration {",
			"    trigger_events     = [\"DeploymentFailure\"]",
			"    trigger_name       = \"foo-trigger\"",
			"    trigger_target_arn = \"foo-topic-arn\"",
			"  }",
			"",
			"  auto_rollback_configuration {",
			"    enabled = true",
			"    events  = [\"DEPLOYMENT_FAILURE\"]",
			"  }",
			"",
			"  alarm_configuration {",
			"    alarms  = [\"my-alarm-name\"]",
			"    enabled = true",
			"  }",
			"}"
		]
	},
	"codepipeline": {
		"prefix": "codepipeline",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codepipeline",
			"resource \"aws_codepipeline\" \"codepipeline\" {",
			"  name     = \"tf-test-pipeline\"",
			"  role_arn = aws_iam_role.codepipeline_role.arn",
			"",
			"  artifact_store {",
			"    location = aws_s3_bucket.codepipeline_bucket.bucket",
			"    type     = \"S3\"",
			"",
			"    encryption_key {",
			"      id   = data.aws_kms_alias.s3kmskey.arn",
			"      type = \"KMS\"",
			"    }",
			"  }",
			"",
			"  stage {",
			"    name = \"Source\"",
			"",
			"    action {",
			"      name             = \"Source\"",
			"      category         = \"Source\"",
			"      owner            = \"AWS\"",
			"      provider         = \"CodeStarSourceConnection\"",
			"      version          = \"1\"",
			"      output_artifacts = [\"source_output\"]",
			"",
			"      configuration = {",
			"        ConnectionArn    = aws_codestarconnections_connection.example.arn",
			"        FullRepositoryId = \"my-organization/example\"",
			"        BranchName       = \"main\"",
			"      }",
			"    }",
			"  }",
			"",
			"  stage {",
			"    name = \"Build\"",
			"",
			"    action {",
			"      name             = \"Build\"",
			"      category         = \"Build\"",
			"      owner            = \"AWS\"",
			"      provider         = \"CodeBuild\"",
			"      input_artifacts  = [\"source_output\"]",
			"      output_artifacts = [\"build_output\"]",
			"      version          = \"1\"",
			"",
			"      configuration = {",
			"        ProjectName = \"test\"",
			"      }",
			"    }",
			"  }",
			"",
			"  stage {",
			"    name = \"Deploy\"",
			"",
			"    action {",
			"      name            = \"Deploy\"",
			"      category        = \"Deploy\"",
			"      owner           = \"AWS\"",
			"      provider        = \"CloudFormation\"",
			"      input_artifacts = [\"build_output\"]",
			"      version         = \"1\"",
			"",
			"      configuration = {",
			"        ActionMode     = \"REPLACE_ON_FAILURE\"",
			"        Capabilities   = \"CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM\"",
			"        OutputFileName = \"CreateStackOutput.json\"",
			"        StackName      = \"MyStack\"",
			"        TemplatePath   = \"build_output::sam-templated.yaml\"",
			"      }",
			"    }",
			"  }",
			"}",
			"",
			"resource \"aws_codestarconnections_connection\" \"example\" {",
			"  name          = \"example-connection\"",
			"  provider_type = \"GitHub\"",
			"}",
			"",
			"resource \"aws_s3_bucket\" \"codepipeline_bucket\" {",
			"  bucket = \"test-bucket\"",
			"}",
			"",
			"resource \"aws_s3_bucket_acl\" \"codepipeline_bucket_acl\" {",
			"  bucket = aws_s3_bucket.codepipeline_bucket.id",
			"  acl    = \"private\"",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"assume_role\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"codepipeline.amazonaws.com\"]",
			"    }",
			"",
			"    actions = [\"sts:AssumeRole\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role\" \"codepipeline_role\" {",
			"  name               = \"test-role\"",
			"  assume_role_policy = data.aws_iam_policy_document.assume_role.json",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"codepipeline_policy\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    actions = [",
			"      \"s3:GetObject\",",
			"      \"s3:GetObjectVersion\",",
			"      \"s3:GetBucketVersioning\",",
			"      \"s3:PutObjectAcl\",",
			"      \"s3:PutObject\",",
			"    ]",
			"",
			"    resources = [",
			"      aws_s3_bucket.codepipeline_bucket.arn,",
			"      \"${aws_s3_bucket.codepipeline_bucket.arn}/*\"",
			"    ]",
			"  }",
			"",
			"  statement {",
			"    effect    = \"Allow\"",
			"    actions   = [\"codestar-connections:UseConnection\"]",
			"    resources = [aws_codestarconnections_connection.example.arn]",
			"  }",
			"",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    actions = [",
			"      \"codebuild:BatchGetBuilds\",",
			"      \"codebuild:StartBuild\",",
			"    ]",
			"",
			"    resources = [\"*\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role_policy\" \"codepipeline_policy\" {",
			"  name   = \"codepipeline_policy\"",
			"  role   = aws_iam_role.codepipeline_role.id",
			"  policy = data.aws_iam_policy_document.codepipeline_policy.json",
			"}",
			"",
			"data \"aws_kms_alias\" \"s3kmskey\" {",
			"  name = \"alias/myKmsKey\"",
			"}"
		]
	},
	"codepipeline_custom_action_type": {
		"prefix": "codepipeline_custom_action_type",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codepipeline_custom_action_type",
			"resource \"aws_codepipeline_custom_action_type\" \"example\" {",
			"  category = \"Build\"",
			"",
			"  input_artifact_details {",
			"    maximum_count = 1",
			"    minimum_count = 0",
			"  }",
			"",
			"  output_artifact_details {",
			"    maximum_count = 1",
			"    minimum_count = 0",
			"  }",
			"",
			"  provider_name = \"example\"",
			"  version       = \"1\"",
			"}"
		]
	},
	"codestarconnections_connection": {
		"prefix": "codestarconnections_connection",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codestarconnections_connection",
			"resource \"aws_codestarconnections_connection\" \"example\" {",
			"  name          = \"example-connection\"",
			"  provider_type = \"Bitbucket\"",
			"}",
			"",
			"resource \"aws_codepipeline\" \"example\" {",
			"  name     = \"tf-test-pipeline\"",
			"  role_arn = aws_iam_role.codepipeline_role.arn",
			"",
			"  artifact_store {",
			"    # ...",
			"  }",
			"",
			"  stage {",
			"    name = \"Source\"",
			"    action {",
			"      name             = \"Source\"",
			"      category         = \"Source\"",
			"      owner            = \"AWS\"",
			"      provider         = \"CodeStarSourceConnection\"",
			"      version          = \"1\"",
			"      output_artifacts = [\"source_output\"]",
			"      configuration = {",
			"        ConnectionArn    = aws_codestarconnections_connection.example.arn",
			"        FullRepositoryId = \"my-organization/test\"",
			"        BranchName       = \"main\"",
			"      }",
			"    }",
			"  }",
			"",
			"  stage {",
			"    name = \"Build\"",
			"    action {",
			"      # ...",
			"    }",
			"  }",
			"",
			"  stage {",
			"    name = \"Deploy\"",
			"    action {",
			"      # ...",
			"    }",
			"  }",
			"}"
		]
	},
	"codestarconnections_host": {
		"prefix": "codestarconnections_host",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codestarconnections_host",
			"resource \"aws_codestarconnections_host\" \"example\" {",
			"  name              = \"example-host\"",
			"  provider_endpoint = \"https://example.com\"",
			"  provider_type     = \"GitHubEnterpriseServer\"",
			"}"
		]
	},
	"cognito_managed_user_pool_client": {
		"prefix": "cognito_managed_user_pool_client",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cognito_managed_user_pool_client",
			"resource \"aws_cognito_managed_user_pool_client\" \"example\" {",
			"  name_prefix  = \"AmazonOpenSearchService-example\"",
			"  user_pool_id = aws_cognito_user_pool.example.id",
			"",
			"  depends_on = [",
			"    aws_opensearch_domain.example,",
			"  ]",
			"}",
			"",
			"resource \"aws_cognito_user_pool\" \"example\" {",
			"  name = \"example\"",
			"}",
			"",
			"resource \"aws_cognito_identity_pool\" \"example\" {",
			"  identity_pool_name = \"example\"",
			"",
			"  lifecycle {",
			"    ignore_changes = [cognito_identity_providers]",
			"  }",
			"}",
			"",
			"resource \"aws_opensearch_domain\" \"example\" {",
			"  domain_name = \"example\"",
			"",
			"  cognito_options {",
			"    enabled          = true",
			"    user_pool_id     = aws_cognito_user_pool.example.id",
			"    identity_pool_id = aws_cognito_identity_pool.example.id",
			"    role_arn         = aws_iam_role.example.arn",
			"  }",
			"",
			"  ebs_options {",
			"    ebs_enabled = true",
			"    volume_size = 10",
			"  }",
			"",
			"  depends_on = [",
			"    aws_cognito_user_pool_domain.example,",
			"    aws_iam_role_policy_attachment.example,",
			"  ]",
			"}",
			"",
			"resource \"aws_iam_role\" \"example\" {",
			"  name               = \"example-role\"",
			"  path               = \"/service-role/\"",
			"  assume_role_policy = data.aws_iam_policy_document.example.json",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"example\" {",
			"  statement {",
			"    sid     = \"\"",
			"    actions = [\"sts:AssumeRole\"]",
			"    effect  = \"Allow\"",
			"",
			"    principals {",
			"      type = \"Service\"",
			"      identifiers = [",
			"        \"es.${data.aws_partition.current.dns_suffix}\",",
			"      ]",
			"    }",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role_policy_attachment\" \"example\" {",
			"  role       = aws_iam_role.example.name",
			"  policy_arn = \"arn:${data.aws_partition.current.partition}:iam::aws:policy/AmazonESCognitoAccess\"",
			"}",
			"",
			"data \"aws_partition\" \"current\" {}"
		]
	},
	"cognito_risk_configuration": {
		"prefix": "cognito_risk_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cognito_risk_configuration",
			"resource \"aws_cognito_risk_configuration\" \"example\" {",
			"  user_pool_id = aws_cognito_user_pool.example.id",
			"",
			"  risk_exception_configuration {",
			"    blocked_ip_range_list = [\"10.10.10.10/32\"]",
			"  }",
			"}"
		]
	},
	"cognito_user_pool": {
		"prefix": "cognito_user_pool",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cognito_user_pool",
			"resource \"aws_cognito_user_pool\" \"pool\" {",
			"  name = \"mypool\"",
			"}"
		]
	},
	"cognito_user_pool_client": {
		"prefix": "cognito_user_pool_client",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cognito_user_pool_client",
			"resource \"aws_cognito_user_pool_client\" \"client\" {",
			"  name = \"client\"",
			"",
			"  user_pool_id = aws_cognito_user_pool.pool.id",
			"}",
			"",
			"resource \"aws_cognito_user_pool\" \"pool\" {",
			"  name = \"pool\"",
			"}"
		]
	},
	"cognito_user_pool_domain": {
		"prefix": "cognito_user_pool_domain",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cognito_user_pool_domain",
			"resource \"aws_cognito_user_pool_domain\" \"main\" {",
			"  domain       = \"example-domain\"",
			"  user_pool_id = aws_cognito_user_pool.example.id",
			"}",
			"",
			"resource \"aws_cognito_user_pool\" \"example\" {",
			"  name = \"example-pool\"",
			"}"
		]
	},
	"connect_lambda_function_association": {
		"prefix": "connect_lambda_function_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/connect_lambda_function_association",
			"resource \"aws_connect_lambda_function_association\" \"example\" {",
			"  function_arn = aws_lambda_function.example.arn",
			"  instance_id  = aws_connect_instance.example.id",
			"}"
		]
	},
	"datasync_location_efs": {
		"prefix": "datasync_location_efs",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/datasync_location_efs",
			"resource \"aws_datasync_location_efs\" \"example\" {",
			"  # The below example uses aws_efs_mount_target as a reference to ensure a mount target already exists when resource creation occurs.",
			"  # You can accomplish the same behavior with depends_on or an aws_efs_mount_target data source reference.",
			"  efs_file_system_arn = aws_efs_mount_target.example.file_system_arn",
			"",
			"  ec2_config {",
			"    security_group_arns = [aws_security_group.example.arn]",
			"    subnet_arn          = aws_subnet.example.arn",
			"  }",
			"}"
		]
	},
	"datasync_location_s3": {
		"prefix": "datasync_location_s3",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/datasync_location_s3",
			"resource \"aws_datasync_location_s3\" \"example\" {",
			"  s3_bucket_arn = aws_s3_bucket.example.arn",
			"  subdirectory  = \"/example/prefix\"",
			"",
			"  s3_config {",
			"    bucket_access_role_arn = aws_iam_role.example.arn",
			"  }",
			"}"
		]
	},
	"db_cluster_snapshot": {
		"prefix": "db_cluster_snapshot",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_cluster_snapshot",
			"resource \"aws_db_cluster_snapshot\" \"example\" {",
			"  db_cluster_identifier          = aws_rds_cluster.example.id",
			"  db_cluster_snapshot_identifier = \"resourcetestsnapshot1234\"",
			"}"
		]
	},
	"db_instance": {
		"prefix": "db_instance",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance",
			"resource \"aws_db_instance\" \"default\" {",
			"  allocated_storage    = 10",
			"  db_name              = \"mydb\"",
			"  engine               = \"mysql\"",
			"  engine_version       = \"5.7\"",
			"  instance_class       = \"db.t3.micro\"",
			"  username             = \"foo\"",
			"  password             = \"foobarbaz\"",
			"  parameter_group_name = \"default.mysql5.7\"",
			"  skip_final_snapshot  = true",
			"}"
		]
	},
	"db_instance_automated_backups_replication": {
		"prefix": "db_instance_automated_backups_replication",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance_automated_backups_replication",
			"resource \"aws_db_instance_automated_backups_replication\" \"default\" {",
			"  source_db_instance_arn = \"arn:aws:rds:us-west-2:123456789012:db:mydatabase\"",
			"  retention_period       = 14",
			"}"
		]
	},
	"db_instance_role_association": {
		"prefix": "db_instance_role_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance_role_association",
			"resource \"aws_db_instance_role_association\" \"example\" {",
			"  db_instance_identifier = aws_db_instance.example.identifier",
			"  feature_name           = \"S3_INTEGRATION\"",
			"  role_arn               = aws_iam_role.example.arn",
			"}"
		]
	},
	"db_option_group": {
		"prefix": "db_option_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_option_group",
			"resource \"aws_db_option_group\" \"example\" {",
			"  name                     = \"option-group-test-terraform\"",
			"  option_group_description = \"Terraform Option Group\"",
			"  engine_name              = \"sqlserver-ee\"",
			"  major_engine_version     = \"11.00\"",
			"",
			"  option {",
			"    option_name = \"Timezone\"",
			"",
			"    option_settings {",
			"      name  = \"TIME_ZONE\"",
			"      value = \"UTC\"",
			"    }",
			"  }",
			"",
			"  option {",
			"    option_name = \"SQLSERVER_BACKUP_RESTORE\"",
			"",
			"    option_settings {",
			"      name  = \"IAM_ROLE_ARN\"",
			"      value = aws_iam_role.example.arn",
			"    }",
			"  }",
			"",
			"  option {",
			"    option_name = \"TDE\"",
			"  }",
			"}"
		]
	},
	"db_parameter_group": {
		"prefix": "db_parameter_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_parameter_group",
			"resource \"aws_db_parameter_group\" \"default\" {",
			"  name   = \"rds-pg\"",
			"  family = \"mysql5.6\"",
			"",
			"  parameter {",
			"    name  = \"character_set_server\"",
			"    value = \"utf8\"",
			"  }",
			"",
			"  parameter {",
			"    name  = \"character_set_client\"",
			"    value = \"utf8\"",
			"  }",
			"}"
		]
	},
	"db_proxy": {
		"prefix": "db_proxy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_proxy",
			"resource \"aws_db_proxy\" \"example\" {",
			"  name                   = \"example\"",
			"  debug_logging          = false",
			"  engine_family          = \"MYSQL\"",
			"  idle_client_timeout    = 1800",
			"  require_tls            = true",
			"  role_arn               = aws_iam_role.example.arn",
			"  vpc_security_group_ids = [aws_security_group.example.id]",
			"  vpc_subnet_ids         = [aws_subnet.example.id]",
			"",
			"  auth {",
			"    auth_scheme = \"SECRETS\"",
			"    description = \"example\"",
			"    iam_auth    = \"DISABLED\"",
			"    secret_arn  = aws_secretsmanager_secret.example.arn",
			"  }",
			"",
			"  tags = {",
			"    Name = \"example\"",
			"    Key  = \"value\"",
			"  }",
			"}"
		]
	},
	"db_proxy_endpoint": {
		"prefix": "db_proxy_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_proxy_endpoint",
			"resource \"aws_db_proxy_endpoint\" \"example\" {",
			"  db_proxy_name          = aws_db_proxy.test.name",
			"  db_proxy_endpoint_name = \"example\"",
			"  vpc_subnet_ids         = aws_subnet.test[*].id",
			"  target_role            = \"READ_ONLY\"",
			"}"
		]
	},
	"db_subnet_group": {
		"prefix": "db_subnet_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_subnet_group",
			"resource \"aws_db_subnet_group\" \"default\" {",
			"  name       = \"main\"",
			"  subnet_ids = [aws_subnet.frontend.id, aws_subnet.backend.id]",
			"",
			"  tags = {",
			"    Name = \"My DB subnet group\"",
			"  }",
			"}"
		]
	},
	"default_network_acl": {
		"prefix": "default_network_acl",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_network_acl",
			"resource \"aws_default_network_acl\" \"default\" {",
			"  # ... other configuration ...",
			"",
			"  lifecycle {",
			"    ignore_changes = [subnet_ids]",
			"  }",
			"}"
		]
	},
	"default_route_table": {
		"prefix": "default_route_table",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_route_table",
			"resource \"aws_default_route_table\" \"example\" {",
			"  default_route_table_id = aws_vpc.example.default_route_table_id",
			"",
			"  route {",
			"    cidr_block = \"10.0.1.0/24\"",
			"    gateway_id = aws_internet_gateway.example.id",
			"  }",
			"",
			"  route {",
			"    ipv6_cidr_block        = \"::/0\"",
			"    egress_only_gateway_id = aws_egress_only_internet_gateway.example.id",
			"  }",
			"",
			"  tags = {",
			"    Name = \"example\"",
			"  }",
			"}"
		]
	},
	"default_subnet": {
		"prefix": "default_subnet",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_subnet",
			"resource \"aws_default_subnet\" \"default_az1\" {",
			"  availability_zone = \"us-west-2a\"",
			"",
			"  tags = {",
			"    Name = \"Default subnet for us-west-2a\"",
			"  }",
			"}"
		]
	},
	"default_vpc": {
		"prefix": "default_vpc",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_vpc",
			"resource \"aws_default_vpc\" \"default\" {",
			"  tags = {",
			"    Name = \"Default VPC\"",
			"  }",
			"}"
		]
	},
	"default_vpc_dhcp_options": {
		"prefix": "default_vpc_dhcp_options",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_vpc_dhcp_options",
			"resource \"aws_default_vpc_dhcp_options\" \"default\" {",
			"  tags = {",
			"    Name = \"Default DHCP Option Set\"",
			"  }",
			"}"
		]
	},
	"dms_s3_endpoint": {
		"prefix": "dms_s3_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dms_s3_endpoint",
			"resource \"aws_dms_s3_endpoint\" \"example\" {",
			"  endpoint_id             = \"donnedtipi\"",
			"  endpoint_type           = \"target\"",
			"  bucket_name             = \"beckut_name\"",
			"  service_access_role_arn = aws_iam_role.example.arn",
			"",
			"  depends_on = [aws_iam_role_policy.example]",
			"}"
		]
	},
	"docdb_cluster": {
		"prefix": "docdb_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster",
			"resource \"aws_docdb_cluster\" \"docdb\" {",
			"  cluster_identifier      = \"my-docdb-cluster\"",
			"  engine                  = \"docdb\"",
			"  master_username         = \"foo\"",
			"  master_password         = \"mustbeeightchars\"",
			"  backup_retention_period = 5",
			"  preferred_backup_window = \"07:00-09:00\"",
			"  skip_final_snapshot     = true",
			"}"
		]
	},
	"docdb_cluster_instance": {
		"prefix": "docdb_cluster_instance",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster_instance",
			"resource \"aws_docdb_cluster_instance\" \"cluster_instances\" {",
			"  count              = 2",
			"  identifier         = \"docdb-cluster-demo-${count.index}\"",
			"  cluster_identifier = aws_docdb_cluster.default.id",
			"  instance_class     = \"db.r5.large\"",
			"}",
			"",
			"resource \"aws_docdb_cluster\" \"default\" {",
			"  cluster_identifier = \"docdb-cluster-demo\"",
			"  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
			"  master_username    = \"foo\"",
			"  master_password    = \"barbut8chars\"",
			"}"
		]
	},
	"docdb_cluster_parameter_group": {
		"prefix": "docdb_cluster_parameter_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster_parameter_group",
			"resource \"aws_docdb_cluster_parameter_group\" \"example\" {",
			"  family      = \"docdb3.6\"",
			"  name        = \"example\"",
			"  description = \"docdb cluster parameter group\"",
			"",
			"  parameter {",
			"    name  = \"tls\"",
			"    value = \"enabled\"",
			"  }",
			"}"
		]
	},
	"docdb_cluster_snapshot": {
		"prefix": "docdb_cluster_snapshot",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster_snapshot",
			"resource \"aws_docdb_cluster_snapshot\" \"example\" {",
			"  db_cluster_identifier          = aws_docdb_cluster.example.id",
			"  db_cluster_snapshot_identifier = \"resourcetestsnapshot1234\"",
			"}"
		]
	},
	"docdb_global_cluster": {
		"prefix": "docdb_global_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_global_cluster",
			"resource \"aws_docdb_global_cluster\" \"example\" {",
			"  # ... other configuration ...",
			"",
			"  # There is no API for reading source_db_cluster_identifier",
			"  lifecycle {",
			"    ignore_changes = [source_db_cluster_identifier]",
			"  }",
			"}"
		]
	},
	"docdb_subnet_group": {
		"prefix": "docdb_subnet_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_subnet_group",
			"resource \"aws_docdb_subnet_group\" \"default\" {",
			"  name       = \"main\"",
			"  subnet_ids = [aws_subnet.frontend.id, aws_subnet.backend.id]",
			"",
			"  tags = {",
			"    Name = \"My docdb subnet group\"",
			"  }",
			"}"
		]
	},
	"dynamodb_contributor_insights": {
		"prefix": "dynamodb_contributor_insights",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_contributor_insights",
			"resource \"aws_dynamodb_contributor_insights\" \"test\" {",
			"  table_name = \"ExampleTableName\"",
			"}"
		]
	},
	"dynamodb_table": {
		"prefix": "dynamodb_table",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table",
			"resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {",
			"  name           = \"GameScores\"",
			"  billing_mode   = \"PROVISIONED\"",
			"  read_capacity  = 20",
			"  write_capacity = 20",
			"  hash_key       = \"UserId\"",
			"  range_key      = \"GameTitle\"",
			"",
			"  attribute {",
			"    name = \"UserId\"",
			"    type = \"S\"",
			"  }",
			"",
			"  attribute {",
			"    name = \"GameTitle\"",
			"    type = \"S\"",
			"  }",
			"",
			"  attribute {",
			"    name = \"TopScore\"",
			"    type = \"N\"",
			"  }",
			"",
			"  ttl {",
			"    attribute_name = \"TimeToExist\"",
			"    enabled        = false",
			"  }",
			"",
			"  global_secondary_index {",
			"    name               = \"GameTitleIndex\"",
			"    hash_key           = \"GameTitle\"",
			"    range_key          = \"TopScore\"",
			"    write_capacity     = 10",
			"    read_capacity      = 10",
			"    projection_type    = \"INCLUDE\"",
			"    non_key_attributes = [\"UserId\"]",
			"  }",
			"",
			"  tags = {",
			"    Name        = \"dynamodb-table-1\"",
			"    Environment = \"production\"",
			"  }",
			"}"
		]
	},
	"dynamodb_table_item": {
		"prefix": "dynamodb_table_item",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table_item",
			"resource \"aws_dynamodb_table_item\" \"example\" {",
			"  table_name = aws_dynamodb_table.example.name",
			"  hash_key   = aws_dynamodb_table.example.hash_key",
			"",
			"  item = <<ITEM",
			"{",
			"  \"exampleHashKey\": {\"S\": \"something\"},",
			"  \"one\": {\"N\": \"11111\"},",
			"  \"two\": {\"N\": \"22222\"},",
			"  \"three\": {\"N\": \"33333\"},",
			"  \"four\": {\"N\": \"44444\"}",
			"}",
			"ITEM",
			"}",
			"",
			"resource \"aws_dynamodb_table\" \"example\" {",
			"  name           = \"example-name\"",
			"  read_capacity  = 10",
			"  write_capacity = 10",
			"  hash_key       = \"exampleHashKey\"",
			"",
			"  attribute {",
			"    name = \"exampleHashKey\"",
			"    type = \"S\"",
			"  }",
			"}"
		]
	},
	"ebs_default_kms_key": {
		"prefix": "ebs_default_kms_key",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_default_kms_key",
			"resource \"aws_ebs_default_kms_key\" \"example\" {",
			"  key_arn = aws_kms_key.example.arn",
			"}"
		]
	},
	"ebs_encryption_by_default": {
		"prefix": "ebs_encryption_by_default",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_encryption_by_default",
			"resource \"aws_ebs_encryption_by_default\" \"example\" {",
			"  enabled = true",
			"}"
		]
	},
	"ebs_snapshot_import": {
		"prefix": "ebs_snapshot_import",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_snapshot_import",
			"resource \"aws_ebs_snapshot_import\" \"example\" {",
			"  disk_container {",
			"    format = \"VHD\"",
			"    user_bucket {",
			"      s3_bucket = \"disk-images\"",
			"      s3_key    = \"source.vhd\"",
			"    }",
			"  }",
			"",
			"  role_name = \"disk-image-import\"",
			"",
			"  tags = {",
			"    Name = \"HelloWorld\"",
			"  }",
			"}"
		]
	},
	"ebs_volume": {
		"prefix": "ebs_volume",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume",
			"resource \"aws_ebs_volume\" \"example\" {",
			"  availability_zone = \"us-west-2a\"",
			"  size              = 40",
			"",
			"  tags = {",
			"    Name = \"HelloWorld\"",
			"  }",
			"}"
		]
	},
	"ec2_availability_zone_group": {
		"prefix": "ec2_availability_zone_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_availability_zone_group",
			"resource \"aws_ec2_availability_zone_group\" \"example\" {",
			"  group_name    = \"us-west-2-lax-1\"",
			"  opt_in_status = \"opted-in\"",
			"}"
		]
	},
	"ec2_capacity_reservation": {
		"prefix": "ec2_capacity_reservation",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_capacity_reservation",
			"resource \"aws_ec2_capacity_reservation\" \"default\" {",
			"  instance_type     = \"t2.micro\"",
			"  instance_platform = \"Linux/UNIX\"",
			"  availability_zone = \"eu-west-1a\"",
			"  instance_count    = 1",
			"}"
		]
	},
	"ec2_carrier_gateway": {
		"prefix": "ec2_carrier_gateway",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_carrier_gateway",
			"resource \"aws_ec2_carrier_gateway\" \"example\" {",
			"  vpc_id = aws_vpc.example.id",
			"",
			"  tags = {",
			"    Name = \"example-carrier-gateway\"",
			"  }",
			"}"
		]
	},
	"ec2_client_vpn_authorization_rule": {
		"prefix": "ec2_client_vpn_authorization_rule",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_client_vpn_authorization_rule",
			"resource \"aws_ec2_client_vpn_authorization_rule\" \"example\" {",
			"  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.example.id",
			"  target_network_cidr    = aws_subnet.example.cidr_block",
			"  authorize_all_groups   = true",
			"}"
		]
	},
	"ec2_client_vpn_endpoint": {
		"prefix": "ec2_client_vpn_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_client_vpn_endpoint",
			"resource \"aws_ec2_client_vpn_endpoint\" \"example\" {",
			"  description            = \"terraform-clientvpn-example\"",
			"  server_certificate_arn = aws_acm_certificate.cert.arn",
			"  client_cidr_block      = \"10.0.0.0/16\"",
			"",
			"  authentication_options {",
			"    type                       = \"certificate-authentication\"",
			"    root_certificate_chain_arn = aws_acm_certificate.root_cert.arn",
			"  }",
			"",
			"  connection_log_options {",
			"    enabled               = true",
			"    cloudwatch_log_group  = aws_cloudwatch_log_group.lg.name",
			"    cloudwatch_log_stream = aws_cloudwatch_log_stream.ls.name",
			"  }",
			"}"
		]
	},
	"ec2_client_vpn_network_association": {
		"prefix": "ec2_client_vpn_network_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_client_vpn_network_association",
			"resource \"aws_ec2_client_vpn_network_association\" \"example\" {",
			"  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.example.id",
			"  subnet_id              = aws_subnet.example.id",
			"}"
		]
	},
	"ec2_client_vpn_route": {
		"prefix": "ec2_client_vpn_route",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_client_vpn_route",
			"resource \"aws_ec2_client_vpn_route\" \"example\" {",
			"  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.example.id",
			"  destination_cidr_block = \"0.0.0.0/0\"",
			"  target_vpc_subnet_id   = aws_ec2_client_vpn_network_association.example.subnet_id",
			"}",
			"",
			"resource \"aws_ec2_client_vpn_network_association\" \"example\" {",
			"  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.example.id",
			"  subnet_id              = aws_subnet.example.id",
			"}",
			"",
			"resource \"aws_ec2_client_vpn_endpoint\" \"example\" {",
			"  description            = \"Example Client VPN endpoint\"",
			"  server_certificate_arn = aws_acm_certificate.example.arn",
			"  client_cidr_block      = \"10.0.0.0/16\"",
			"",
			"  authentication_options {",
			"    type                       = \"certificate-authentication\"",
			"    root_certificate_chain_arn = aws_acm_certificate.example.arn",
			"  }",
			"",
			"  connection_log_options {",
			"    enabled = false",
			"  }",
			"}"
		]
	},
	"ec2_fleet": {
		"prefix": "ec2_fleet",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_fleet",
			"resource \"aws_ec2_fleet\" \"example\" {",
			"  launch_template_config {",
			"    launch_template_specification {",
			"      launch_template_id = aws_launch_template.example.id",
			"      version            = aws_launch_template.example.latest_version",
			"    }",
			"  }",
			"",
			"  target_capacity_specification {",
			"    default_target_capacity_type = \"spot\"",
			"    total_target_capacity        = 5",
			"  }",
			"}"
		]
	},
	"ec2_instance_connect_endpoint": {
		"prefix": "ec2_instance_connect_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_instance_connect_endpoint",
			"resource \"aws_ec2_instance_connect_endpoint\" \"example\" {",
			"  subnet_id = aws_subnet.example.id",
			"}"
		]
	},
	"ec2_local_gateway_route": {
		"prefix": "ec2_local_gateway_route",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_local_gateway_route",
			"resource \"aws_ec2_local_gateway_route\" \"example\" {",
			"  destination_cidr_block                   = \"172.16.0.0/16\"",
			"  local_gateway_route_table_id             = data.aws_ec2_local_gateway_route_table.example.id",
			"  local_gateway_virtual_interface_group_id = data.aws_ec2_local_gateway_virtual_interface_group.example.id",
			"}"
		]
	},
	"ec2_managed_prefix_list": {
		"prefix": "ec2_managed_prefix_list",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_managed_prefix_list",
			"resource \"aws_ec2_managed_prefix_list\" \"example\" {",
			"  name           = \"All VPC CIDR-s\"",
			"  address_family = \"IPv4\"",
			"  max_entries    = 5",
			"",
			"  entry {",
			"    cidr        = aws_vpc.example.cidr_block",
			"    description = \"Primary\"",
			"  }",
			"",
			"  entry {",
			"    cidr        = aws_vpc_ipv4_cidr_block_association.example.cidr_block",
			"    description = \"Secondary\"",
			"  }",
			"",
			"  tags = {",
			"    Env = \"live\"",
			"  }",
			"}"
		]
	},
	"ec2_network_insights_path": {
		"prefix": "ec2_network_insights_path",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_network_insights_path",
			"resource \"aws_ec2_network_insights_path\" \"test\" {",
			"  source      = aws_network_interface.source.id",
			"  destination = aws_network_interface.destination.id",
			"  protocol    = \"tcp\"",
			"}"
		]
	},
	"ec2_serial_console_access": {
		"prefix": "ec2_serial_console_access",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_serial_console_access",
			"resource \"aws_ec2_serial_console_access\" \"example\" {",
			"  enabled = true",
			"}"
		]
	},
	"ec2_subnet_cidr_reservation": {
		"prefix": "ec2_subnet_cidr_reservation",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_subnet_cidr_reservation",
			"resource \"aws_ec2_subnet_cidr_reservation\" \"example\" {",
			"  cidr_block       = \"10.0.0.16/28\"",
			"  reservation_type = \"prefix\"",
			"  subnet_id        = aws_subnet.example.id",
			"}"
		]
	},
	"ec2_traffic_mirror_filter": {
		"prefix": "ec2_traffic_mirror_filter",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_traffic_mirror_filter",
			"resource \"aws_ec2_traffic_mirror_filter\" \"foo\" {",
			"  description      = \"traffic mirror filter - terraform example\"",
			"  network_services = [\"amazon-dns\"]",
			"}"
		]
	},
	"ec2_traffic_mirror_target": {
		"prefix": "ec2_traffic_mirror_target",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_traffic_mirror_target",
			"resource \"aws_ec2_traffic_mirror_target\" \"nlb\" {",
			"  description               = \"NLB target\"",
			"  network_load_balancer_arn = aws_lb.lb.arn",
			"}",
			"",
			"resource \"aws_ec2_traffic_mirror_target\" \"eni\" {",
			"  description          = \"ENI target\"",
			"  network_interface_id = aws_instance.test.primary_network_interface_id",
			"}",
			"",
			"resource \"aws_ec2_traffic_mirror_target\" \"gwlb\" {",
			"  description                       = \"GWLB target\"",
			"  gateway_load_balancer_endpoint_id = aws_vpc_endpoint.example.id",
			"}"
		]
	},
	"ec2_transit_gateway": {
		"prefix": "ec2_transit_gateway",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway",
			"resource \"aws_ec2_transit_gateway\" \"example\" {",
			"  description = \"example\"",
			"}"
		]
	},
	"ec2_transit_gateway_multicast_group_member": {
		"prefix": "ec2_transit_gateway_multicast_group_member",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_multicast_group_member",
			"resource \"aws_ec2_transit_gateway_multicast_group_member\" \"example\" {",
			"  group_ip_address                    = \"224.0.0.1\"",
			"  network_interface_id                = aws_network_interface.example.id",
			"  transit_gateway_multicast_domain_id = aws_ec2_transit_gateway_multicast_domain.example.id",
			"}"
		]
	},
	"ec2_transit_gateway_multicast_group_source": {
		"prefix": "ec2_transit_gateway_multicast_group_source",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_multicast_group_source",
			"resource \"aws_ec2_transit_gateway_multicast_group_source\" \"example\" {",
			"  group_ip_address                    = \"224.0.0.1\"",
			"  network_interface_id                = aws_network_interface.example.id",
			"  transit_gateway_multicast_domain_id = aws_ec2_transit_gateway_multicast_domain.example.id",
			"}"
		]
	},
	"ec2_transit_gateway_peering_attachment_accepter": {
		"prefix": "ec2_transit_gateway_peering_attachment_accepter",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_peering_attachment_accepter",
			"resource \"aws_ec2_transit_gateway_peering_attachment_accepter\" \"example\" {",
			"  transit_gateway_attachment_id = aws_ec2_transit_gateway_peering_attachment.example.id",
			"",
			"  tags = {",
			"    Name = \"Example cross-account attachment\"",
			"  }",
			"}"
		]
	},
	"ec2_transit_gateway_policy_table": {
		"prefix": "ec2_transit_gateway_policy_table",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_policy_table",
			"resource \"aws_ec2_transit_gateway_policy_table\" \"example\" {",
			"  transit_gateway_id = aws_ec2_transit_gateway.example.id",
			"",
			"  tags = {",
			"    Name = \"Example Policy Table\"",
			"  }",
			"}"
		]
	},
	"ec2_transit_gateway_policy_table_association": {
		"prefix": "ec2_transit_gateway_policy_table_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_policy_table_association",
			"resource \"aws_ec2_transit_gateway_policy_table_association\" \"example\" {",
			"  transit_gateway_attachment_id   = aws_networkmanager_transit_gateway_peering.example.transit_gateway_peering_attachment_id",
			"  transit_gateway_policy_table_id = aws_ec2_transit_gateway_policy_table.example.id",
			"}"
		]
	},
	"ec2_transit_gateway_prefix_list_reference": {
		"prefix": "ec2_transit_gateway_prefix_list_reference",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_prefix_list_reference",
			"resource \"aws_ec2_transit_gateway_prefix_list_reference\" \"example\" {",
			"  prefix_list_id                 = aws_ec2_managed_prefix_list.example.id",
			"  transit_gateway_attachment_id  = aws_ec2_transit_gateway_vpc_attachment.example.id",
			"  transit_gateway_route_table_id = aws_ec2_transit_gateway.example.association_default_route_table_id",
			"}"
		]
	},
	"ec2_transit_gateway_route": {
		"prefix": "ec2_transit_gateway_route",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_route",
			"resource \"aws_ec2_transit_gateway_route\" \"example\" {",
			"  destination_cidr_block         = \"0.0.0.0/0\"",
			"  transit_gateway_attachment_id  = aws_ec2_transit_gateway_vpc_attachment.example.id",
			"  transit_gateway_route_table_id = aws_ec2_transit_gateway.example.association_default_route_table_id",
			"}"
		]
	},
	"ec2_transit_gateway_route_table": {
		"prefix": "ec2_transit_gateway_route_table",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_route_table",
			"resource \"aws_ec2_transit_gateway_route_table\" \"example\" {",
			"  transit_gateway_id = aws_ec2_transit_gateway.example.id",
			"}"
		]
	},
	"ec2_transit_gateway_route_table_association": {
		"prefix": "ec2_transit_gateway_route_table_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_route_table_association",
			"resource \"aws_ec2_transit_gateway_route_table_association\" \"example\" {",
			"  transit_gateway_attachment_id  = aws_ec2_transit_gateway_vpc_attachment.example.id",
			"  transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.example.id",
			"}"
		]
	},
	"ec2_transit_gateway_route_table_propagation": {
		"prefix": "ec2_transit_gateway_route_table_propagation",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_route_table_propagation",
			"resource \"aws_ec2_transit_gateway_route_table_propagation\" \"example\" {",
			"  transit_gateway_attachment_id  = aws_ec2_transit_gateway_vpc_attachment.example.id",
			"  transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.example.id",
			"}"
		]
	},
	"ec2_transit_gateway_vpc_attachment": {
		"prefix": "ec2_transit_gateway_vpc_attachment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_vpc_attachment",
			"resource \"aws_ec2_transit_gateway_vpc_attachment\" \"example\" {",
			"  subnet_ids         = [aws_subnet.example.id]",
			"  transit_gateway_id = aws_ec2_transit_gateway.example.id",
			"  vpc_id             = aws_vpc.example.id",
			"}"
		]
	},
	"ec2_transit_gateway_vpc_attachment_accepter": {
		"prefix": "ec2_transit_gateway_vpc_attachment_accepter",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_transit_gateway_vpc_attachment_accepter",
			"resource \"aws_ec2_transit_gateway_vpc_attachment_accepter\" \"example\" {",
			"  transit_gateway_attachment_id = aws_ec2_transit_gateway_vpc_attachment.example.id",
			"",
			"  tags = {",
			"    Name = \"Example cross-account attachment\"",
			"  }",
			"}"
		]
	},
	"ecr_pull_through_cache_rule": {
		"prefix": "ecr_pull_through_cache_rule",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_pull_through_cache_rule",
			"resource \"aws_ecr_pull_through_cache_rule\" \"example\" {",
			"  ecr_repository_prefix = \"ecr-public\"",
			"  upstream_registry_url = \"public.ecr.aws\"",
			"}"
		]
	},
	"ecr_registry_scanning_configuration": {
		"prefix": "ecr_registry_scanning_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_registry_scanning_configuration",
			"resource \"aws_ecr_registry_scanning_configuration\" \"configuration\" {",
			"  scan_type = \"ENHANCED\"",
			"",
			"  rule {",
			"    scan_frequency = \"CONTINUOUS_SCAN\"",
			"    repository_filter {",
			"      filter      = \"example\"",
			"      filter_type = \"WILDCARD\"",
			"    }",
			"  }",
			"}"
		]
	},
	"ecr_repository": {
		"prefix": "ecr_repository",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository",
			"resource \"aws_ecr_repository\" \"foo\" {",
			"  name                 = \"bar\"",
			"  image_tag_mutability = \"MUTABLE\"",
			"",
			"  image_scanning_configuration {",
			"    scan_on_push = true",
			"  }",
			"}"
		]
	},
	"ecs_account_setting_default": {
		"prefix": "ecs_account_setting_default",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecs_account_setting_default",
			"resource \"aws_ecs_account_setting_default\" \"test\" {",
			"  name  = \"taskLongArnFormat\"",
			"  value = \"enabled\"",
			"}"
		]
	},
	"ecs_cluster": {
		"prefix": "ecs_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecs_cluster",
			"resource \"aws_ecs_cluster\" \"foo\" {",
			"  name = \"white-hart\"",
			"",
			"  setting {",
			"    name  = \"containerInsights\"",
			"    value = \"enabled\"",
			"  }",
			"}"
		]
	},
	"ecs_service": {
		"prefix": "ecs_service",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecs_service",
			"resource \"aws_ecs_service\" \"mongo\" {",
			"  name            = \"mongodb\"",
			"  cluster         = aws_ecs_cluster.foo.id",
			"  task_definition = aws_ecs_task_definition.mongo.arn",
			"  desired_count   = 3",
			"  iam_role        = aws_iam_role.foo.arn",
			"  depends_on      = [aws_iam_role_policy.foo]",
			"",
			"  ordered_placement_strategy {",
			"    type  = \"binpack\"",
			"    field = \"cpu\"",
			"  }",
			"",
			"  load_balancer {",
			"    target_group_arn = aws_lb_target_group.foo.arn",
			"    container_name   = \"mongo\"",
			"    container_port   = 8080",
			"  }",
			"",
			"  placement_constraints {",
			"    type       = \"memberOf\"",
			"    expression = \"attribute:ecs.availability-zone in [us-west-2a, us-west-2b]\"",
			"  }",
			"}"
		]
	},
	"ecs_task_definition": {
		"prefix": "ecs_task_definition",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecs_task_definition",
			"resource \"aws_ecs_task_definition\" \"service\" {",
			"  family = \"service\"",
			"  container_definitions = jsonencode([",
			"    {",
			"      name      = \"first\"",
			"      image     = \"service-first\"",
			"      cpu       = 10",
			"      memory    = 512",
			"      essential = true",
			"      portMappings = [",
			"        {",
			"          containerPort = 80",
			"          hostPort      = 80",
			"        }",
			"      ]",
			"    },",
			"    {",
			"      name      = \"second\"",
			"      image     = \"service-second\"",
			"      cpu       = 10",
			"      memory    = 256",
			"      essential = true",
			"      portMappings = [",
			"        {",
			"          containerPort = 443",
			"          hostPort      = 443",
			"        }",
			"      ]",
			"    }",
			"  ])",
			"",
			"  volume {",
			"    name      = \"service-storage\"",
			"    host_path = \"/ecs/service-storage\"",
			"  }",
			"",
			"  placement_constraints {",
			"    type       = \"memberOf\"",
			"    expression = \"attribute:ecs.availability-zone in [us-west-2a, us-west-2b]\"",
			"  }",
			"}"
		]
	},
	"ecs_task_set": {
		"prefix": "ecs_task_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecs_task_set",
			"resource \"aws_ecs_task_set\" \"example\" {",
			"  service         = aws_ecs_service.example.id",
			"  cluster         = aws_ecs_cluster.example.id",
			"  task_definition = aws_ecs_task_definition.example.arn",
			"",
			"  load_balancer {",
			"    target_group_arn = aws_lb_target_group.example.arn",
			"    container_name   = \"mongo\"",
			"    container_port   = 8080",
			"  }",
			"}"
		]
	},
	"efs_access_point": {
		"prefix": "efs_access_point",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/efs_access_point",
			"resource \"aws_efs_access_point\" \"test\" {",
			"  file_system_id = aws_efs_file_system.foo.id",
			"}"
		]
	},
	"efs_file_system": {
		"prefix": "efs_file_system",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/efs_file_system",
			"resource \"aws_efs_file_system\" \"foo\" {",
			"  creation_token = \"my-product\"",
			"",
			"  tags = {",
			"    Name = \"MyProduct\"",
			"  }",
			"}"
		]
	},
	"efs_mount_target": {
		"prefix": "efs_mount_target",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/efs_mount_target",
			"resource \"aws_efs_mount_target\" \"alpha\" {",
			"  file_system_id = aws_efs_file_system.foo.id",
			"  subnet_id      = aws_subnet.alpha.id",
			"}",
			"",
			"resource \"aws_vpc\" \"foo\" {",
			"  cidr_block = \"10.0.0.0/16\"",
			"}",
			"",
			"resource \"aws_subnet\" \"alpha\" {",
			"  vpc_id            = aws_vpc.foo.id",
			"  availability_zone = \"us-west-2a\"",
			"  cidr_block        = \"10.0.1.0/24\"",
			"}"
		]
	},
	"eip": {
		"prefix": "eip",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eip",
			"resource \"aws_eip\" \"lb\" {",
			"  instance = aws_instance.web.id",
			"  domain   = \"vpc\"",
			"}"
		]
	},
	"eip_association": {
		"prefix": "eip_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eip_association",
			"resource \"aws_eip_association\" \"eip_assoc\" {",
			"  instance_id   = aws_instance.web.id",
			"  allocation_id = aws_eip.example.id",
			"}",
			"",
			"resource \"aws_instance\" \"web\" {",
			"  ami               = \"ami-21f78e11\"",
			"  availability_zone = \"us-west-2a\"",
			"  instance_type     = \"t2.micro\"",
			"",
			"  tags = {",
			"    Name = \"HelloWorld\"",
			"  }",
			"}",
			"",
			"resource \"aws_eip\" \"example\" {",
			"  domain = \"vpc\"",
			"}"
		]
	},
	"eks_addon": {
		"prefix": "eks_addon",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_addon",
			"resource \"aws_eks_addon\" \"example\" {",
			"  cluster_name = aws_eks_cluster.example.name",
			"  addon_name   = \"vpc-cni\"",
			"}"
		]
	},
	"eks_cluster": {
		"prefix": "eks_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_cluster",
			"resource \"aws_eks_cluster\" \"example\" {",
			"  name     = \"example\"",
			"  role_arn = aws_iam_role.example.arn",
			"",
			"  vpc_config {",
			"    subnet_ids = [aws_subnet.example1.id, aws_subnet.example2.id]",
			"  }",
			"",
			"  # Ensure that IAM Role permissions are created before and deleted after EKS Cluster handling.",
			"  # Otherwise, EKS will not be able to properly delete EKS managed EC2 infrastructure such as Security Groups.",
			"  depends_on = [",
			"    aws_iam_role_policy_attachment.example-AmazonEKSClusterPolicy,",
			"    aws_iam_role_policy_attachment.example-AmazonEKSVPCResourceController,",
			"  ]",
			"}",
			"",
			"output \"endpoint\" {",
			"  value = aws_eks_cluster.example.endpoint",
			"}",
			"",
			"output \"kubeconfig-certificate-authority-data\" {",
			"  value = aws_eks_cluster.example.certificate_authority[0].data",
			"}"
		]
	},
	"eks_fargate_profile": {
		"prefix": "eks_fargate_profile",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_fargate_profile",
			"resource \"aws_eks_fargate_profile\" \"example\" {",
			"  cluster_name           = aws_eks_cluster.example.name",
			"  fargate_profile_name   = \"example\"",
			"  pod_execution_role_arn = aws_iam_role.example.arn",
			"  subnet_ids             = aws_subnet.example[*].id",
			"",
			"  selector {",
			"    namespace = \"example\"",
			"  }",
			"}"
		]
	},
	"eks_identity_provider_config": {
		"prefix": "eks_identity_provider_config",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_identity_provider_config",
			"resource \"aws_eks_identity_provider_config\" \"example\" {",
			"  cluster_name = aws_eks_cluster.example.name",
			"",
			"  oidc {",
			"    client_id                     = \"your client_id\"",
			"    identity_provider_config_name = \"example\"",
			"    issuer_url                    = \"your issuer_url\"",
			"  }",
			"}"
		]
	},
	"eks_node_group": {
		"prefix": "eks_node_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_node_group",
			"resource \"aws_eks_node_group\" \"example\" {",
			"  cluster_name    = aws_eks_cluster.example.name",
			"  node_group_name = \"example\"",
			"  node_role_arn   = aws_iam_role.example.arn",
			"  subnet_ids      = aws_subnet.example[*].id",
			"",
			"  scaling_config {",
			"    desired_size = 1",
			"    max_size     = 2",
			"    min_size     = 1",
			"  }",
			"",
			"  update_config {",
			"    max_unavailable = 1",
			"  }",
			"",
			"  # Ensure that IAM Role permissions are created before and deleted after EKS Node Group handling.",
			"  # Otherwise, EKS will not be able to properly delete EC2 Instances and Elastic Network Interfaces.",
			"  depends_on = [",
			"    aws_iam_role_policy_attachment.example-AmazonEKSWorkerNodePolicy,",
			"    aws_iam_role_policy_attachment.example-AmazonEKS_CNI_Policy,",
			"    aws_iam_role_policy_attachment.example-AmazonEC2ContainerRegistryReadOnly,",
			"  ]",
			"}"
		]
	},
	"elastic_beanstalk_application": {
		"prefix": "elastic_beanstalk_application",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elastic_beanstalk_application",
			"resource \"aws_elastic_beanstalk_application\" \"tftest\" {",
			"  name        = \"tf-test-name\"",
			"  description = \"tf-test-desc\"",
			"",
			"  appversion_lifecycle {",
			"    service_role          = aws_iam_role.beanstalk_service.arn",
			"    max_count             = 128",
			"    delete_source_from_s3 = true",
			"  }",
			"}"
		]
	},
	"elasticache_cluster": {
		"prefix": "elasticache_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_cluster",
			"resource \"aws_elasticache_cluster\" \"example\" {",
			"  cluster_id           = \"cluster-example\"",
			"  engine               = \"memcached\"",
			"  node_type            = \"cache.m4.large\"",
			"  num_cache_nodes      = 2",
			"  parameter_group_name = \"default.memcached1.4\"",
			"  port                 = 11211",
			"}"
		]
	},
	"elasticache_global_replication_group": {
		"prefix": "elasticache_global_replication_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_global_replication_group",
			"resource \"aws_elasticache_global_replication_group\" \"example\" {",
			"  global_replication_group_id_suffix = \"example\"",
			"  primary_replication_group_id       = aws_elasticache_replication_group.primary.id",
			"}",
			"",
			"resource \"aws_elasticache_replication_group\" \"primary\" {",
			"  replication_group_id = \"example-primary\"",
			"  description          = \"primary replication group\"",
			"",
			"  engine         = \"redis\"",
			"  engine_version = \"5.0.6\"",
			"  node_type      = \"cache.m5.large\"",
			"",
			"  num_cache_clusters = 1",
			"}",
			"",
			"resource \"aws_elasticache_replication_group\" \"secondary\" {",
			"  provider = aws.other_region",
			"",
			"  replication_group_id        = \"example-secondary\"",
			"  description                 = \"secondary replication group\"",
			"  global_replication_group_id = aws_elasticache_global_replication_group.example.global_replication_group_id",
			"",
			"  num_cache_clusters = 1",
			"}"
		]
	},
	"elasticache_parameter_group": {
		"prefix": "elasticache_parameter_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_parameter_group",
			"resource \"aws_elasticache_parameter_group\" \"default\" {",
			"  name   = \"cache-params\"",
			"  family = \"redis2.8\"",
			"",
			"  parameter {",
			"    name  = \"activerehashing\"",
			"    value = \"yes\"",
			"  }",
			"",
			"  parameter {",
			"    name  = \"min-slaves-to-write\"",
			"    value = \"2\"",
			"  }",
			"}"
		]
	},
	"elasticache_replication_group": {
		"prefix": "elasticache_replication_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_replication_group",
			"resource \"aws_elasticache_replication_group\" \"example\" {",
			"  automatic_failover_enabled  = true",
			"  preferred_cache_cluster_azs = [\"us-west-2a\", \"us-west-2b\"]",
			"  replication_group_id        = \"tf-rep-group-1\"",
			"  description                 = \"example description\"",
			"  node_type                   = \"cache.m4.large\"",
			"  num_cache_clusters          = 2",
			"  parameter_group_name        = \"default.redis3.2\"",
			"  port                        = 6379",
			"}"
		]
	},
	"elasticache_user": {
		"prefix": "elasticache_user",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_user",
			"resource \"aws_elasticache_user\" \"test\" {",
			"  user_id       = \"testUserId\"",
			"  user_name     = \"testUserName\"",
			"  access_string = \"on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember\"",
			"  engine        = \"REDIS\"",
			"  passwords     = [\"password123456789\"]",
			"}"
		]
	},
	"elasticsearch_domain": {
		"prefix": "elasticsearch_domain",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticsearch_domain",
			"resource \"aws_elasticsearch_domain\" \"example\" {",
			"  domain_name           = \"example\"",
			"  elasticsearch_version = \"7.10\"",
			"",
			"  cluster_config {",
			"    instance_type = \"r4.large.elasticsearch\"",
			"  }",
			"",
			"  tags = {",
			"    Domain = \"TestDomain\"",
			"  }",
			"}"
		]
	},
	"elastictranscoder_pipeline": {
		"prefix": "elastictranscoder_pipeline",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elastictranscoder_pipeline",
			"resource \"aws_elastictranscoder_pipeline\" \"bar\" {",
			"  input_bucket = aws_s3_bucket.input_bucket.id",
			"  name         = \"aws_elastictranscoder_pipeline_tf_test_\"",
			"  role         = aws_iam_role.test_role.arn",
			"",
			"  content_config {",
			"    bucket        = aws_s3_bucket.content_bucket.id",
			"    storage_class = \"Standard\"",
			"  }",
			"",
			"  thumbnail_config {",
			"    bucket        = aws_s3_bucket.thumb_bucket.id",
			"    storage_class = \"Standard\"",
			"  }",
			"}"
		]
	},
	"elastictranscoder_preset": {
		"prefix": "elastictranscoder_preset",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elastictranscoder_preset",
			"resource \"aws_elastictranscoder_preset\" \"bar\" {",
			"  container   = \"mp4\"",
			"  description = \"Sample Preset\"",
			"  name        = \"sample_preset\"",
			"",
			"  audio {",
			"    audio_packing_mode = \"SingleTrack\"",
			"    bit_rate           = 96",
			"    channels           = 2",
			"    codec              = \"AAC\"",
			"    sample_rate        = 44100",
			"  }",
			"",
			"  audio_codec_options {",
			"    profile = \"AAC-LC\"",
			"  }",
			"",
			"  video {",
			"    bit_rate             = \"1600\"",
			"    codec                = \"H.264\"",
			"    display_aspect_ratio = \"16:9\"",
			"    fixed_gop            = \"false\"",
			"    frame_rate           = \"auto\"",
			"    max_frame_rate       = \"60\"",
			"    keyframes_max_dist   = 240",
			"    max_height           = \"auto\"",
			"    max_width            = \"auto\"",
			"    padding_policy       = \"Pad\"",
			"    sizing_policy        = \"Fit\"",
			"  }",
			"",
			"  video_codec_options = {",
			"    Profile                  = \"main\"",
			"    Level                    = \"2.2\"",
			"    MaxReferenceFrames       = 3",
			"    InterlacedMode           = \"Progressive\"",
			"    ColorSpaceConversionMode = \"None\"",
			"  }",
			"",
			"  video_watermarks {",
			"    id                = \"Terraform Test\"",
			"    max_width         = \"20%\"",
			"    max_height        = \"20%\"",
			"    sizing_policy     = \"ShrinkToFit\"",
			"    horizontal_align  = \"Right\"",
			"    horizontal_offset = \"10px\"",
			"    vertical_align    = \"Bottom\"",
			"    vertical_offset   = \"10px\"",
			"    opacity           = \"55.5\"",
			"    target            = \"Content\"",
			"  }",
			"",
			"  thumbnails {",
			"    format         = \"png\"",
			"    interval       = 120",
			"    max_width      = \"auto\"",
			"    max_height     = \"auto\"",
			"    padding_policy = \"Pad\"",
			"    sizing_policy  = \"Fit\"",
			"  }",
			"}"
		]
	},
	"emr_studio_session_mapping": {
		"prefix": "emr_studio_session_mapping",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/emr_studio_session_mapping",
			"resource \"aws_emr_studio_session_mapping\" \"example\" {",
			"  studio_id          = aws_emr_studio.example.id",
			"  identity_type      = \"USER\"",
			"  identity_id        = \"example\"",
			"  session_policy_arn = aws_iam_policy.example.arn",
			"}"
		]
	},
	"gamelift_game_session_queue": {
		"prefix": "gamelift_game_session_queue",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/gamelift_game_session_queue",
			"resource \"aws_gamelift_game_session_queue\" \"test\" {",
			"  name = \"example-session-queue\"",
			"",
			"  destinations = [",
			"    aws_gamelift_fleet.us_west_2_fleet.arn,",
			"    aws_gamelift_fleet.eu_central_1_fleet.arn,",
			"  ]",
			"",
			"  notification_target = aws_sns_topic.game_session_queue_notifications.arn",
			"",
			"  player_latency_policy {",
			"    maximum_individual_player_latency_milliseconds = 100",
			"    policy_duration_seconds                        = 5",
			"  }",
			"",
			"  player_latency_policy {",
			"    maximum_individual_player_latency_milliseconds = 200",
			"  }",
			"",
			"  timeout_in_seconds = 60",
			"}"
		]
	},
	"iam_access_key": {
		"prefix": "iam_access_key",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_access_key",
			"resource \"aws_iam_access_key\" \"lb\" {",
			"  user    = aws_iam_user.lb.name",
			"  pgp_key = \"keybase:some_person_that_exists\"",
			"}",
			"",
			"resource \"aws_iam_user\" \"lb\" {",
			"  name = \"loadbalancer\"",
			"  path = \"/system/\"",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"lb_ro\" {",
			"  statement {",
			"    effect    = \"Allow\"",
			"    actions   = [\"ec2:Describe*\"]",
			"    resources = [\"*\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_user_policy\" \"lb_ro\" {",
			"  name   = \"test\"",
			"  user   = aws_iam_user.lb.name",
			"  policy = data.aws_iam_policy_document.lb_ro.json",
			"}",
			"",
			"output \"secret\" {",
			"  value = aws_iam_access_key.lb.encrypted_secret",
			"}"
		]
	},
	"iam_account_alias": {
		"prefix": "iam_account_alias",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_account_alias",
			"resource \"aws_iam_account_alias\" \"alias\" {",
			"  account_alias = \"my-account-alias\"",
			"}"
		]
	},
	"iam_account_password_policy": {
		"prefix": "iam_account_password_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_account_password_policy",
			"resource \"aws_iam_account_password_policy\" \"strict\" {",
			"  minimum_password_length        = 8",
			"  require_lowercase_characters   = true",
			"  require_numbers                = true",
			"  require_uppercase_characters   = true",
			"  require_symbols                = true",
			"  allow_users_to_change_password = true",
			"}"
		]
	},
	"iam_group": {
		"prefix": "iam_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_group",
			"resource \"aws_iam_group\" \"developers\" {",
			"  name = \"developers\"",
			"  path = \"/users/\"",
			"}"
		]
	},
	"iam_group_membership": {
		"prefix": "iam_group_membership",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_group_membership",
			"resource \"aws_iam_group_membership\" \"team\" {",
			"  name = \"tf-testing-group-membership\"",
			"",
			"  users = [",
			"    aws_iam_user.user_one.name,",
			"    aws_iam_user.user_two.name,",
			"  ]",
			"",
			"  group = aws_iam_group.group.name",
			"}",
			"",
			"resource \"aws_iam_group\" \"group\" {",
			"  name = \"test-group\"",
			"}",
			"",
			"resource \"aws_iam_user\" \"user_one\" {",
			"  name = \"test-user\"",
			"}",
			"",
			"resource \"aws_iam_user\" \"user_two\" {",
			"  name = \"test-user-two\"",
			"}"
		]
	},
	"iam_group_policy": {
		"prefix": "iam_group_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_group_policy",
			"resource \"aws_iam_group_policy\" \"my_developer_policy\" {",
			"  name  = \"my_developer_policy\"",
			"  group = aws_iam_group.my_developers.name",
			"",
			"  # Terraform's \"jsonencode\" function converts a",
			"  # Terraform expression result to valid JSON syntax.",
			"  policy = jsonencode({",
			"    Version = \"2012-10-17\"",
			"    Statement = [",
			"      {",
			"        Action = [",
			"          \"ec2:Describe*\",",
			"        ]",
			"        Effect   = \"Allow\"",
			"        Resource = \"*\"",
			"      },",
			"    ]",
			"  })",
			"}",
			"",
			"resource \"aws_iam_group\" \"my_developers\" {",
			"  name = \"developers\"",
			"  path = \"/users/\"",
			"}"
		]
	},
	"iam_instance_profile": {
		"prefix": "iam_instance_profile",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_instance_profile",
			"resource \"aws_iam_instance_profile\" \"test_profile\" {",
			"  name = \"test_profile\"",
			"  role = aws_iam_role.role.name",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"assume_role\" {",
			"  statement {",
			"    effect = \"Allow\"",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"ec2.amazonaws.com\"]",
			"    }",
			"",
			"    actions = [\"sts:AssumeRole\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_role\" \"role\" {",
			"  name               = \"test_role\"",
			"  path               = \"/\"",
			"  assume_role_policy = data.aws_iam_policy_document.assume_role.json",
			"}"
		]
	},
	"iam_openid_connect_provider": {
		"prefix": "iam_openid_connect_provider",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_openid_connect_provider",
			"resource \"aws_iam_openid_connect_provider\" \"default\" {",
			"  url = \"https://accounts.google.com\"",
			"",
			"  client_id_list = [",
			"    \"266362248691-342342xasdasdasda-apps.googleusercontent.com\",",
			"  ]",
			"",
			"  thumbprint_list = [\"cf23df2207d99a74fbe169e3eba035e633b65d94\"]",
			"}"
		]
	},
	"iam_policy": {
		"prefix": "iam_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_policy",
			"resource \"aws_iam_policy\" \"policy\" {",
			"  name        = \"test_policy\"",
			"  path        = \"/\"",
			"  description = \"My test policy\"",
			"",
			"  # Terraform's \"jsonencode\" function converts a",
			"  # Terraform expression result to valid JSON syntax.",
			"  policy = jsonencode({",
			"    Version = \"2012-10-17\"",
			"    Statement = [",
			"      {",
			"        Action = [",
			"          \"ec2:Describe*\",",
			"        ]",
			"        Effect   = \"Allow\"",
			"        Resource = \"*\"",
			"      },",
			"    ]",
			"  })",
			"}"
		]
	},
	"iam_role": {
		"prefix": "iam_role",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_role",
			"resource \"aws_iam_role\" \"test_role\" {",
			"  name = \"test_role\"",
			"",
			"  # Terraform's \"jsonencode\" function converts a",
			"  # Terraform expression result to valid JSON syntax.",
			"  assume_role_policy = jsonencode({",
			"    Version = \"2012-10-17\"",
			"    Statement = [",
			"      {",
			"        Action = \"sts:AssumeRole\"",
			"        Effect = \"Allow\"",
			"        Sid    = \"\"",
			"        Principal = {",
			"          Service = \"ec2.amazonaws.com\"",
			"        }",
			"      },",
			"    ]",
			"  })",
			"",
			"  tags = {",
			"    tag-key = \"tag-value\"",
			"  }",
			"}"
		]
	},
	"iam_role_policy": {
		"prefix": "iam_role_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_role_policy",
			"resource \"aws_iam_role_policy\" \"test_policy\" {",
			"  name = \"test_policy\"",
			"  role = aws_iam_role.test_role.id",
			"",
			"  # Terraform's \"jsonencode\" function converts a",
			"  # Terraform expression result to valid JSON syntax.",
			"  policy = jsonencode({",
			"    Version = \"2012-10-17\"",
			"    Statement = [",
			"      {",
			"        Action = [",
			"          \"ec2:Describe*\",",
			"        ]",
			"        Effect   = \"Allow\"",
			"        Resource = \"*\"",
			"      },",
			"    ]",
			"  })",
			"}",
			"",
			"resource \"aws_iam_role\" \"test_role\" {",
			"  name = \"test_role\"",
			"",
			"  assume_role_policy = jsonencode({",
			"    Version = \"2012-10-17\"",
			"    Statement = [",
			"      {",
			"        Action = \"sts:AssumeRole\"",
			"        Effect = \"Allow\"",
			"        Sid    = \"\"",
			"        Principal = {",
			"          Service = \"ec2.amazonaws.com\"",
			"        }",
			"      },",
			"    ]",
			"  })",
			"}"
		]
	},
	"iam_saml_provider": {
		"prefix": "iam_saml_provider",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_saml_provider",
			"resource \"aws_iam_saml_provider\" \"default\" {",
			"  name                   = \"myprovider\"",
			"  saml_metadata_document = file(\"saml-metadata.xml\")",
			"}"
		]
	},
	"iam_security_token_service_preferences": {
		"prefix": "iam_security_token_service_preferences",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_security_token_service_preferences",
			"resource \"aws_iam_security_token_service_preferences\" \"example\" {",
			"  global_endpoint_token_version = \"v2Token\"",
			"}"
		]
	},
	"iam_server_certificate": {
		"prefix": "iam_server_certificate",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_server_certificate",
			"resource \"aws_iam_server_certificate\" \"test_cert\" {",
			"  name             = \"some_test_cert\"",
			"  certificate_body = file(\"self-ca-cert.pem\")",
			"  private_key      = file(\"test-key.pem\")",
			"}"
		]
	},
	"iam_service_linked_role": {
		"prefix": "iam_service_linked_role",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_service_linked_role",
			"resource \"aws_iam_service_linked_role\" \"elasticbeanstalk\" {",
			"  aws_service_name = \"elasticbeanstalk.amazonaws.com\"",
			"}"
		]
	},
	"iam_signing_certificate": {
		"prefix": "iam_signing_certificate",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_signing_certificate",
			"resource \"aws_iam_signing_certificate\" \"test_cert\" {",
			"  username         = \"some_test_cert\"",
			"  certificate_body = file(\"self-ca-cert.pem\")",
			"}"
		]
	},
	"iam_user": {
		"prefix": "iam_user",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user",
			"resource \"aws_iam_user\" \"lb\" {",
			"  name = \"loadbalancer\"",
			"  path = \"/system/\"",
			"",
			"  tags = {",
			"    tag-key = \"tag-value\"",
			"  }",
			"}",
			"",
			"resource \"aws_iam_access_key\" \"lb\" {",
			"  user = aws_iam_user.lb.name",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"lb_ro\" {",
			"  statement {",
			"    effect    = \"Allow\"",
			"    actions   = [\"ec2:Describe*\"]",
			"    resources = [\"*\"]",
			"  }",
			"}",
			"",
			"resource \"aws_iam_user_policy\" \"lb_ro\" {",
			"  name   = \"test\"",
			"  user   = aws_iam_user.lb.name",
			"  policy = data.aws_iam_policy_document.lb_ro.json",
			"}"
		]
	},
	"iam_user_group_membership": {
		"prefix": "iam_user_group_membership",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user_group_membership",
			"resource \"aws_iam_user_group_membership\" \"example1\" {",
			"  user = aws_iam_user.user1.name",
			"",
			"  groups = [",
			"    aws_iam_group.group1.name,",
			"    aws_iam_group.group2.name,",
			"  ]",
			"}",
			"",
			"resource \"aws_iam_user_group_membership\" \"example2\" {",
			"  user = aws_iam_user.user1.name",
			"",
			"  groups = [",
			"    aws_iam_group.group3.name,",
			"  ]",
			"}",
			"",
			"resource \"aws_iam_user\" \"user1\" {",
			"  name = \"user1\"",
			"}",
			"",
			"resource \"aws_iam_group\" \"group1\" {",
			"  name = \"group1\"",
			"}",
			"",
			"resource \"aws_iam_group\" \"group2\" {",
			"  name = \"group2\"",
			"}",
			"",
			"resource \"aws_iam_group\" \"group3\" {",
			"  name = \"group3\"",
			"}"
		]
	},
	"iam_user_login_profile": {
		"prefix": "iam_user_login_profile",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user_login_profile",
			"resource \"aws_iam_user_login_profile\" \"example\" {",
			"  # ... other configuration ...",
			"",
			"  lifecycle {",
			"    ignore_changes = [",
			"      password_length,",
			"      password_reset_required,",
			"      pgp_key,",
			"    ]",
			"  }",
			"}"
		]
	},
	"iam_user_policy": {
		"prefix": "iam_user_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user_policy",
			"resource \"aws_iam_user_policy\" \"lb_ro\" {",
			"  name = \"test\"",
			"  user = aws_iam_user.lb.name",
			"",
			"  # Terraform's \"jsonencode\" function converts a",
			"  # Terraform expression result to valid JSON syntax.",
			"  policy = jsonencode({",
			"    Version = \"2012-10-17\"",
			"    Statement = [",
			"      {",
			"        Action = [",
			"          \"ec2:Describe*\",",
			"        ]",
			"        Effect   = \"Allow\"",
			"        Resource = \"*\"",
			"      },",
			"    ]",
			"  })",
			"}",
			"",
			"resource \"aws_iam_user\" \"lb\" {",
			"  name = \"loadbalancer\"",
			"  path = \"/system/\"",
			"}",
			"",
			"resource \"aws_iam_access_key\" \"lb\" {",
			"  user = aws_iam_user.lb.name",
			"}"
		]
	},
	"iam_virtual_mfa_device": {
		"prefix": "iam_virtual_mfa_device",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_virtual_mfa_device",
			"resource \"aws_iam_virtual_mfa_device\" \"example\" {",
			"  virtual_mfa_device_name = \"example\"",
			"}"
		]
	},
	"inspector_assessment_template": {
		"prefix": "inspector_assessment_template",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/inspector_assessment_template",
			"resource \"aws_inspector_assessment_template\" \"example\" {",
			"  name       = \"example\"",
			"  target_arn = aws_inspector_assessment_target.example.arn",
			"  duration   = 3600",
			"",
			"  rules_package_arns = [",
			"    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-9hgA516p\",",
			"    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-H5hpSawc\",",
			"    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-JJOtZiqQ\",",
			"    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-vg5GGHSD\",",
			"  ]",
			"",
			"  event_subscription {",
			"    event     = \"ASSESSMENT_RUN_COMPLETED\"",
			"    topic_arn = aws_sns_topic.example.arn",
			"  }",
			"}"
		]
	},
	"kms_custom_key_store": {
		"prefix": "kms_custom_key_store",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kms_custom_key_store",
			"resource \"aws_kms_custom_key_store\" \"test\" {",
			"  cloud_hsm_cluster_id  = var.cloud_hsm_cluster_id",
			"  custom_key_store_name = \"kms-custom-key-store-test\"",
			"  key_store_password    = \"noplaintextpasswords1\"",
			"",
			"  trust_anchor_certificate = file(\"anchor-certificate.crt\")",
			"}"
		]
	},
	"kms_external_key": {
		"prefix": "kms_external_key",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kms_external_key",
			"resource \"aws_kms_external_key\" \"example\" {",
			"  description = \"KMS EXTERNAL for AMI encryption\"",
			"}"
		]
	},
	"kms_key": {
		"prefix": "kms_key",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kms_key",
			"resource \"aws_kms_key\" \"a\" {",
			"  description             = \"KMS key 1\"",
			"  deletion_window_in_days = 10",
			"}"
		]
	},
	"lambda_alias": {
		"prefix": "lambda_alias",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_alias",
			"resource \"aws_lambda_alias\" \"test_lambda_alias\" {",
			"  name             = \"my_alias\"",
			"  description      = \"a sample description\"",
			"  function_name    = aws_lambda_function.lambda_function_test.arn",
			"  function_version = \"1\"",
			"",
			"  routing_config {",
			"    additional_version_weights = {",
			"      \"2\" = 0.5",
			"    }",
			"  }",
			"}"
		]
	},
	"lambda_code_signing_config": {
		"prefix": "lambda_code_signing_config",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_code_signing_config",
			"resource \"aws_lambda_code_signing_config\" \"new_csc\" {",
			"  allowed_publishers {",
			"    signing_profile_version_arns = [",
			"      aws_signer_signing_profile.example1.arn,",
			"      aws_signer_signing_profile.example2.arn,",
			"    ]",
			"  }",
			"",
			"  policies {",
			"    untrusted_artifact_on_deployment = \"Warn\"",
			"  }",
			"",
			"  description = \"My awesome code signing config.\"",
			"}"
		]
	},
	"lambda_event_source_mapping": {
		"prefix": "lambda_event_source_mapping",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_event_source_mapping",
			"resource \"aws_lambda_event_source_mapping\" \"example\" {",
			"  event_source_arn  = aws_dynamodb_table.example.stream_arn",
			"  function_name     = aws_lambda_function.example.arn",
			"  starting_position = \"LATEST\"",
			"}"
		]
	},
	"lambda_function_event_invoke_config": {
		"prefix": "lambda_function_event_invoke_config",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function_event_invoke_config",
			"resource \"aws_lambda_function_event_invoke_config\" \"example\" {",
			"  function_name = aws_lambda_alias.example.function_name",
			"",
			"  destination_config {",
			"    on_failure {",
			"      destination = aws_sqs_queue.example.arn",
			"    }",
			"",
			"    on_success {",
			"      destination = aws_sns_topic.example.arn",
			"    }",
			"  }",
			"}"
		]
	},
	"lambda_function_url": {
		"prefix": "lambda_function_url",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function_url",
			"resource \"aws_lambda_function_url\" \"test_latest\" {",
			"  function_name      = aws_lambda_function.test.function_name",
			"  authorization_type = \"NONE\"",
			"}",
			"",
			"resource \"aws_lambda_function_url\" \"test_live\" {",
			"  function_name      = aws_lambda_function.test.function_name",
			"  qualifier          = \"my_alias\"",
			"  authorization_type = \"AWS_IAM\"",
			"",
			"  cors {",
			"    allow_credentials = true",
			"    allow_origins     = [\"*\"]",
			"    allow_methods     = [\"*\"]",
			"    allow_headers     = [\"date\", \"keep-alive\"]",
			"    expose_headers    = [\"keep-alive\", \"date\"]",
			"    max_age           = 86400",
			"  }",
			"}"
		]
	},
	"lambda_invocation": {
		"prefix": "lambda_invocation",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_invocation",
			"resource \"aws_lambda_invocation\" \"example\" {",
			"  function_name = aws_lambda_function.lambda_function_test.function_name",
			"",
			"  input = jsonencode({",
			"    key1 = \"value1\"",
			"    key2 = \"value2\"",
			"  })",
			"}",
			"",
			"output \"result_entry\" {",
			"  value = jsondecode(aws_lambda_invocation.example.result)[\"key1\"]",
			"}"
		]
	},
	"lambda_layer_version": {
		"prefix": "lambda_layer_version",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_layer_version",
			"resource \"aws_lambda_layer_version\" \"lambda_layer\" {",
			"  filename   = \"lambda_layer_payload.zip\"",
			"  layer_name = \"lambda_layer_name\"",
			"",
			"  compatible_runtimes = [\"nodejs16.x\"]",
			"}"
		]
	},
	"lambda_layer_version_permission": {
		"prefix": "lambda_layer_version_permission",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_layer_version_permission",
			"resource \"aws_lambda_layer_version_permission\" \"lambda_layer_permission\" {",
			"  layer_name     = \"arn:aws:lambda:us-west-2:123456654321:layer:test_layer1\"",
			"  version_number = 1",
			"  principal      = \"111111111111\"",
			"  action         = \"lambda:GetLayerVersion\"",
			"  statement_id   = \"dev-account\"",
			"}"
		]
	},
	"lambda_permission": {
		"prefix": "lambda_permission",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission",
			"resource \"aws_lambda_permission\" \"allow_cloudwatch\" {",
			"  statement_id  = \"AllowExecutionFromCloudWatch\"",
			"  action        = \"lambda:InvokeFunction\"",
			"  function_name = aws_lambda_function.test_lambda.function_name",
			"  principal     = \"events.amazonaws.com\"",
			"  source_arn    = \"arn:aws:events:eu-west-1:111122223333:rule/RunDaily\"",
			"  qualifier     = aws_lambda_alias.test_alias.name",
			"}",
			"",
			"resource \"aws_lambda_alias\" \"test_alias\" {",
			"  name             = \"testalias\"",
			"  description      = \"a sample description\"",
			"  function_name    = aws_lambda_function.test_lambda.function_name",
			"  function_version = \"$LATEST\"",
			"}",
			"",
			"resource \"aws_lambda_function\" \"test_lambda\" {",
			"  filename      = \"lambdatest.zip\"",
			"  function_name = \"lambda_function_name\"",
			"  role          = aws_iam_role.iam_for_lambda.arn",
			"  handler       = \"exports.handler\"",
			"  runtime       = \"nodejs16.x\"",
			"}",
			"",
			"resource \"aws_iam_role\" \"iam_for_lambda\" {",
			"  name = \"iam_for_lambda\"",
			"",
			"  # Terraform's \"jsonencode\" function converts a",
			"  # Terraform expression result to valid JSON syntax.",
			"  assume_role_policy = jsonencode({",
			"    Version = \"2012-10-17\"",
			"    Statement = [",
			"      {",
			"        Action = \"sts:AssumeRole\"",
			"        Effect = \"Allow\"",
			"        Sid    = \"\"",
			"        Principal = {",
			"          Service = \"lambda.amazonaws.com\"",
			"        }",
			"      },",
			"    ]",
			"  })",
			"}"
		]
	},
	"lambda_provisioned_concurrency_config": {
		"prefix": "lambda_provisioned_concurrency_config",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_provisioned_concurrency_config",
			"resource \"aws_lambda_provisioned_concurrency_config\" \"example\" {",
			"  function_name                     = aws_lambda_alias.example.function_name",
			"  provisioned_concurrent_executions = 1",
			"  qualifier                         = aws_lambda_alias.example.name",
			"}"
		]
	},
	"lb": {
		"prefix": "lb",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lb",
			"resource \"aws_lb\" \"test\" {",
			"  name               = \"test-lb-tf\"",
			"  internal           = false",
			"  load_balancer_type = \"application\"",
			"  security_groups    = [aws_security_group.lb_sg.id]",
			"  subnets            = [for subnet in aws_subnet.public : subnet.id]",
			"",
			"  enable_deletion_protection = true",
			"",
			"  access_logs {",
			"    bucket  = aws_s3_bucket.lb_logs.id",
			"    prefix  = \"test-lb\"",
			"    enabled = true",
			"  }",
			"",
			"  tags = {",
			"    Environment = \"production\"",
			"  }",
			"}"
		]
	},
	"lb_listener": {
		"prefix": "lb_listener",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lb_listener",
			"resource \"aws_lb_listener\" \"front_end\" {",
			"  load_balancer_arn = aws_lb.front_end.arn",
			"  port              = \"443\"",
			"  protocol          = \"TLS\"",
			"  certificate_arn   = \"arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4\"",
			"  alpn_policy       = \"HTTP2Preferred\"",
			"",
			"  default_action {",
			"    type             = \"forward\"",
			"    target_group_arn = aws_lb_target_group.front_end.arn",
			"  }",
			"}"
		]
	},
	"lb_target_group": {
		"prefix": "lb_target_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lb_target_group",
			"resource \"aws_lb_target_group\" \"test\" {",
			"  name     = \"tf-example-lb-tg\"",
			"  port     = 80",
			"  protocol = \"HTTP\"",
			"  vpc_id   = aws_vpc.main.id",
			"}",
			"",
			"resource \"aws_vpc\" \"main\" {",
			"  cidr_block = \"10.0.0.0/16\"",
			"}"
		]
	},
	"lb_target_group_attachment": {
		"prefix": "lb_target_group_attachment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lb_target_group_attachment",
			"resource \"aws_lb_target_group_attachment\" \"test\" {",
			"  target_group_arn = aws_lb_target_group.test.arn",
			"  target_id        = aws_instance.test.id",
			"  port             = 80",
			"}",
			"",
			"resource \"aws_lb_target_group\" \"test\" {",
			"  # ... other configuration ...",
			"}",
			"",
			"resource \"aws_instance\" \"test\" {",
			"  # ... other configuration ...",
			"}"
		]
	},
	"lightsail_lb": {
		"prefix": "lightsail_lb",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lightsail_lb",
			"resource \"aws_lightsail_lb\" \"test\" {",
			"  name              = \"test-load-balancer\"",
			"  health_check_path = \"/\"",
			"  instance_port     = \"80\"",
			"  tags = {",
			"    foo = \"bar\"",
			"  }",
			"}"
		]
	},
	"memorydb_acl": {
		"prefix": "memorydb_acl",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/memorydb_acl",
			"resource \"aws_memorydb_acl\" \"example\" {",
			"  name       = \"my-acl\"",
			"  user_names = [\"my-user-1\", \"my-user-2\"]",
			"}"
		]
	},
	"memorydb_cluster": {
		"prefix": "memorydb_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/memorydb_cluster",
			"resource \"aws_memorydb_cluster\" \"example\" {",
			"  acl_name                 = \"open-access\"",
			"  name                     = \"my-cluster\"",
			"  node_type                = \"db.t4g.small\"",
			"  num_shards               = 2",
			"  security_group_ids       = [aws_security_group.example.id]",
			"  snapshot_retention_limit = 7",
			"  subnet_group_name        = aws_memorydb_subnet_group.example.id",
			"}"
		]
	},
	"memorydb_parameter_group": {
		"prefix": "memorydb_parameter_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/memorydb_parameter_group",
			"resource \"aws_memorydb_parameter_group\" \"example\" {",
			"  name   = \"my-parameter-group\"",
			"  family = \"memorydb_redis6\"",
			"",
			"  parameter {",
			"    name  = \"activedefrag\"",
			"    value = \"yes\"",
			"  }",
			"}"
		]
	},
	"memorydb_snapshot": {
		"prefix": "memorydb_snapshot",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/memorydb_snapshot",
			"resource \"aws_memorydb_snapshot\" \"example\" {",
			"  cluster_name = aws_memorydb_cluster.example.name",
			"  name         = \"my-snapshot\"",
			"}"
		]
	},
	"msk_scram_secret_association": {
		"prefix": "msk_scram_secret_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/msk_scram_secret_association",
			"resource \"aws_msk_scram_secret_association\" \"example\" {",
			"  cluster_arn     = aws_msk_cluster.example.arn",
			"  secret_arn_list = [aws_secretsmanager_secret.example.arn]",
			"",
			"  depends_on = [aws_secretsmanager_secret_version.example]",
			"}",
			"",
			"resource \"aws_msk_cluster\" \"example\" {",
			"  cluster_name = \"example\"",
			"  # ... other configuration...",
			"  client_authentication {",
			"    sasl {",
			"      scram = true",
			"    }",
			"  }",
			"}",
			"",
			"resource \"aws_secretsmanager_secret\" \"example\" {",
			"  name       = \"AmazonMSK_example\"",
			"  kms_key_id = aws_kms_key.example.key_id",
			"}",
			"",
			"resource \"aws_kms_key\" \"example\" {",
			"  description = \"Example Key for MSK Cluster Scram Secret Association\"",
			"}",
			"",
			"resource \"aws_secretsmanager_secret_version\" \"example\" {",
			"  secret_id     = aws_secretsmanager_secret.example.id",
			"  secret_string = jsonencode({ username = \"user\", password = \"pass\" })",
			"}",
			"",
			"data \"aws_iam_policy_document\" \"example\" {",
			"  statement {",
			"    sid    = \"AWSKafkaResourcePolicy\"",
			"    effect = \"Allow\"",
			"",
			"    principals {",
			"      type        = \"Service\"",
			"      identifiers = [\"kafka.amazonaws.com\"]",
			"    }",
			"",
			"    actions   = [\"secretsmanager:getSecretValue\"]",
			"    resources = [aws_secretsmanager_secret.example.arn]",
			"  }",
			"}",
			"",
			"resource \"aws_secretsmanager_secret_policy\" \"example\" {",
			"  secret_arn = aws_secretsmanager_secret.example.arn",
			"  policy     = data.aws_iam_policy_document.example.json",
			"}"
		]
	},
	"msk_vpc_connection": {
		"prefix": "msk_vpc_connection",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/msk_vpc_connection",
			"resource \"aws_msk_vpc_connection\" \"test\" {",
			"  authentication     = \"SASL_IAM\"",
			"  target_cluster_arn = \"aws_msk_cluster.arn\"",
			"  vpc_id             = aws_vpc.test.id",
			"  client_subnets     = aws_subnet.test[*].id",
			"  security_groups    = [aws_security_group.test.id]",
			"}"
		]
	},
	"network_acl": {
		"prefix": "network_acl",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl",
			"resource \"aws_network_acl\" \"main\" {",
			"  vpc_id = aws_vpc.main.id",
			"",
			"  egress {",
			"    protocol   = \"tcp\"",
			"    rule_no    = 200",
			"    action     = \"allow\"",
			"    cidr_block = \"10.3.0.0/18\"",
			"    from_port  = 443",
			"    to_port    = 443",
			"  }",
			"",
			"  ingress {",
			"    protocol   = \"tcp\"",
			"    rule_no    = 100",
			"    action     = \"allow\"",
			"    cidr_block = \"10.3.0.0/18\"",
			"    from_port  = 80",
			"    to_port    = 80",
			"  }",
			"",
			"  tags = {",
			"    Name = \"main\"",
			"  }",
			"}"
		]
	},
	"network_acl_association": {
		"prefix": "network_acl_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_association",
			"resource \"aws_network_acl_association\" \"main\" {",
			"  network_acl_id = aws_network_acl.main.id",
			"  subnet_id      = aws_subnet.main.id",
			"}"
		]
	},
	"network_interface": {
		"prefix": "network_interface",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_interface",
			"resource \"aws_network_interface\" \"test\" {",
			"  subnet_id       = aws_subnet.public_a.id",
			"  private_ips     = [\"10.0.0.50\"]",
			"  security_groups = [aws_security_group.web.id]",
			"",
			"  attachment {",
			"    instance     = aws_instance.test.id",
			"    device_index = 1",
			"  }",
			"}"
		]
	},
	"network_interface_attachment": {
		"prefix": "network_interface_attachment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_interface_attachment",
			"resource \"aws_network_interface_attachment\" \"test\" {",
			"  instance_id          = aws_instance.test.id",
			"  network_interface_id = aws_network_interface.test.id",
			"  device_index         = 0",
			"}"
		]
	},
	"networkfirewall_firewall": {
		"prefix": "networkfirewall_firewall",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkfirewall_firewall",
			"resource \"aws_networkfirewall_firewall\" \"example\" {",
			"  name                = \"example\"",
			"  firewall_policy_arn = aws_networkfirewall_firewall_policy.example.arn",
			"  vpc_id              = aws_vpc.example.id",
			"  subnet_mapping {",
			"    subnet_id = aws_subnet.example.id",
			"  }",
			"",
			"  tags = {",
			"    Tag1 = \"Value1\"",
			"    Tag2 = \"Value2\"",
			"  }",
			"}"
		]
	},
	"networkfirewall_firewall_policy": {
		"prefix": "networkfirewall_firewall_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkfirewall_firewall_policy",
			"resource \"aws_networkfirewall_firewall_policy\" \"example\" {",
			"  name = \"example\"",
			"",
			"  firewall_policy {",
			"    stateless_default_actions          = [\"aws:pass\"]",
			"    stateless_fragment_default_actions = [\"aws:drop\"]",
			"    stateless_rule_group_reference {",
			"      priority     = 1",
			"      resource_arn = aws_networkfirewall_rule_group.example.arn",
			"    }",
			"  }",
			"",
			"  tags = {",
			"    Tag1 = \"Value1\"",
			"    Tag2 = \"Value2\"",
			"  }",
			"}"
		]
	},
	"networkfirewall_logging_configuration": {
		"prefix": "networkfirewall_logging_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkfirewall_logging_configuration",
			"resource \"aws_networkfirewall_logging_configuration\" \"example\" {",
			"  firewall_arn = aws_networkfirewall_firewall.example.arn",
			"  logging_configuration {",
			"    log_destination_config {",
			"      log_destination = {",
			"        bucketName = aws_s3_bucket.example.bucket",
			"        prefix     = \"/example\"",
			"      }",
			"      log_destination_type = \"S3\"",
			"      log_type             = \"FLOW\"",
			"    }",
			"  }",
			"}"
		]
	},
	"networkfirewall_resource_policy": {
		"prefix": "networkfirewall_resource_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkfirewall_resource_policy",
			"resource \"aws_networkfirewall_resource_policy\" \"example\" {",
			"  resource_arn = aws_networkfirewall_firewall_policy.example.arn",
			"  # policy's Action element must include all of the following operations",
			"  policy = jsonencode({",
			"    Statement = [{",
			"      Action = [",
			"        \"network-firewall:ListFirewallPolicies\",",
			"        \"network-firewall:CreateFirewall\",",
			"        \"network-firewall:UpdateFirewall\",",
			"        \"network-firewall:AssociateFirewallPolicy\"",
			"      ]",
			"      Effect   = \"Allow\"",
			"      Resource = aws_networkfirewall_firewall_policy.example.arn",
			"      Principal = {",
			"        AWS = \"arn:aws:iam::123456789012:root\"",
			"      }",
			"    }]",
			"    Version = \"2012-10-17\"",
			"  })",
			"}"
		]
	},
	"networkfirewall_rule_group": {
		"prefix": "networkfirewall_rule_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkfirewall_rule_group",
			"resource \"aws_networkfirewall_rule_group\" \"example\" {",
			"  capacity = 100",
			"  name     = \"example\"",
			"  type     = \"STATEFUL\"",
			"  rule_group {",
			"    rules_source {",
			"      rules_source_list {",
			"        generated_rules_type = \"DENYLIST\"",
			"        target_types         = [\"HTTP_HOST\"]",
			"        targets              = [\"test.example.com\"]",
			"      }",
			"    }",
			"  }",
			"",
			"  tags = {",
			"    Tag1 = \"Value1\"",
			"    Tag2 = \"Value2\"",
			"  }",
			"}"
		]
	},
	"networkmanager_attachment_accepter": {
		"prefix": "networkmanager_attachment_accepter",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_attachment_accepter",
			"resource \"aws_networkmanager_attachment_accepter\" \"test\" {",
			"  attachment_id   = aws_networkmanager_vpc_attachment.vpc.id",
			"  attachment_type = aws_networkmanager_vpc_attachment.vpc.attachment_type",
			"}"
		]
	},
	"networkmanager_connection": {
		"prefix": "networkmanager_connection",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_connection",
			"resource \"aws_networkmanager_connection\" \"example\" {",
			"  global_network_id   = aws_networkmanager_global_network.example.id",
			"  device_id           = aws_networkmanager_device.example1.id",
			"  connected_device_id = aws_networkmanager_device.example2.id",
			"}"
		]
	},
	"networkmanager_core_network": {
		"prefix": "networkmanager_core_network",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_core_network",
			"resource \"aws_networkmanager_core_network\" \"example\" {",
			"  global_network_id = aws_networkmanager_global_network.example.id",
			"}"
		]
	},
	"networkmanager_device": {
		"prefix": "networkmanager_device",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_device",
			"resource \"aws_networkmanager_device\" \"example\" {",
			"  global_network_id = aws_networkmanager_global_network.example.id",
			"  site_id           = aws_networkmanager_site.example.id",
			"}"
		]
	},
	"networkmanager_global_network": {
		"prefix": "networkmanager_global_network",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_global_network",
			"resource \"aws_networkmanager_global_network\" \"example\" {",
			"  description = \"example\"",
			"}"
		]
	},
	"networkmanager_link": {
		"prefix": "networkmanager_link",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_link",
			"resource \"aws_networkmanager_link\" \"example\" {",
			"  global_network_id = aws_networkmanager_global_network.example.id",
			"  site_id           = aws_networkmanager_site.example.id",
			"",
			"  bandwidth {",
			"    upload_speed   = 10",
			"    download_speed = 50",
			"  }",
			"",
			"  provider_name = \"MegaCorp\"",
			"}"
		]
	},
	"networkmanager_link_association": {
		"prefix": "networkmanager_link_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_link_association",
			"resource \"aws_networkmanager_link_association\" \"example\" {",
			"  global_network_id = aws_networkmanager_global_network.example.id",
			"  link_id           = aws_networkmanager_link.example.id",
			"  device_id         = aws_networkmanager_device.example.id",
			"}"
		]
	},
	"networkmanager_site_to_site_vpn_attachment": {
		"prefix": "networkmanager_site_to_site_vpn_attachment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_site_to_site_vpn_attachment",
			"resource \"aws_networkmanager_site_to_site_vpn_attachment\" \"example\" {",
			"  core_network_id    = awscc_networkmanager_core_network.example.id",
			"  vpn_connection_arn = aws_vpn_connection.example.arn",
			"}"
		]
	},
	"networkmanager_transit_gateway_connect_peer_association": {
		"prefix": "networkmanager_transit_gateway_connect_peer_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_transit_gateway_connect_peer_association",
			"resource \"aws_networkmanager_transit_gateway_connect_peer_association\" \"example\" {",
			"  global_network_id                = aws_networkmanager_global_network.example.id",
			"  device_id                        = aws_networkmanager_device.example.id",
			"  transit_gateway_connect_peer_arn = aws_ec2_transit_gateway_connect_peer.example.arn",
			"}"
		]
	},
	"networkmanager_transit_gateway_peering": {
		"prefix": "networkmanager_transit_gateway_peering",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_transit_gateway_peering",
			"resource \"aws_networkmanager_transit_gateway_peering\" \"example\" {",
			"  core_network_id     = awscc_networkmanager_core_network.example.id",
			"  transit_gateway_arn = aws_ec2_transit_gateway.example.arn",
			"}"
		]
	},
	"networkmanager_transit_gateway_route_table_attachment": {
		"prefix": "networkmanager_transit_gateway_route_table_attachment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_transit_gateway_route_table_attachment",
			"resource \"aws_networkmanager_transit_gateway_route_table_attachment\" \"example\" {",
			"  peering_id                      = aws_networkmanager_transit_gateway_peering.example.id",
			"  transit_gateway_route_table_arn = aws_ec2_transit_gateway_route_table.example.arn",
			"}"
		]
	},
	"networkmanager_vpc_attachment": {
		"prefix": "networkmanager_vpc_attachment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_vpc_attachment",
			"resource \"aws_networkmanager_vpc_attachment\" \"example\" {",
			"  subnet_arns     = [aws_subnet.example.arn]",
			"  core_network_id = awscc_networkmanager_core_network.example.id",
			"  vpc_arn         = aws_vpc.example.arn",
			"}"
		]
	},
	"opensearchserverless_vpc_endpoint": {
		"prefix": "opensearchserverless_vpc_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/opensearchserverless_vpc_endpoint",
			"resource \"aws_opensearchserverless_vpc_endpoint\" \"example\" {",
			"  name       = \"myendpoint\"",
			"  subnet_ids = [aws_subnet.example.id]",
			"  vpc_id     = aws_vpc.example.id",
			"}"
		]
	},
	"opsworks_ecs_cluster_layer": {
		"prefix": "opsworks_ecs_cluster_layer",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/opsworks_ecs_cluster_layer",
			"resource \"aws_opsworks_ecs_cluster_layer\" \"example\" {",
			"  stack_id        = aws_opsworks_stack.example.id",
			"  ecs_cluster_arn = aws_ecs_cluster.example.arn",
			"}"
		]
	},
	"opsworks_rds_db_instance": {
		"prefix": "opsworks_rds_db_instance",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/opsworks_rds_db_instance",
			"resource \"aws_opsworks_rds_db_instance\" \"my_instance\" {",
			"  stack_id            = aws_opsworks_stack.my_stack.id",
			"  rds_db_instance_arn = aws_db_instance.my_instance.arn",
			"  db_user             = \"someUser\"",
			"  db_password         = \"somePass\"",
			"}"
		]
	},
	"pinpoint_apns_sandbox_channel": {
		"prefix": "pinpoint_apns_sandbox_channel",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/pinpoint_apns_sandbox_channel",
			"resource \"aws_pinpoint_apns_sandbox_channel\" \"apns_sandbox\" {",
			"  application_id = aws_pinpoint_app.app.application_id",
			"",
			"  certificate = file(\"./certificate.pem\")",
			"  private_key = file(\"./private_key.key\")",
			"}",
			"",
			"resource \"aws_pinpoint_app\" \"app\" {}"
		]
	},
	"pinpoint_apns_voip_sandbox_channel": {
		"prefix": "pinpoint_apns_voip_sandbox_channel",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/pinpoint_apns_voip_sandbox_channel",
			"resource \"aws_pinpoint_apns_voip_sandbox_channel\" \"apns_voip_sandbox\" {",
			"  application_id = aws_pinpoint_app.app.application_id",
			"",
			"  certificate = file(\"./certificate.pem\")",
			"  private_key = file(\"./private_key.key\")",
			"}",
			"",
			"resource \"aws_pinpoint_app\" \"app\" {}"
		]
	},
	"qldb_ledger": {
		"prefix": "qldb_ledger",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/qldb_ledger",
			"resource \"aws_qldb_ledger\" \"sample-ledger\" {",
			"  name             = \"sample-ledger\"",
			"  permissions_mode = \"STANDARD\"",
			"}"
		]
	},
	"qldb_stream": {
		"prefix": "qldb_stream",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/qldb_stream",
			"resource \"aws_qldb_stream\" \"example\" {",
			"  ledger_name          = \"existing-ledger-name\"",
			"  stream_name          = \"sample-ledger-stream\"",
			"  role_arn             = \"sample-role-arn\"",
			"  inclusive_start_time = \"2021-01-01T00:00:00Z\"",
			"",
			"  kinesis_configuration {",
			"    aggregation_enabled = false",
			"    stream_arn          = \"arn:aws:kinesis:us-east-1:xxxxxxxxxxxx:stream/example-kinesis-stream\"",
			"  }",
			"",
			"  tags = {",
			"    \"example\" = \"tag\"",
			"  }",
			"}"
		]
	},
	"quicksight_iam_policy_assignment": {
		"prefix": "quicksight_iam_policy_assignment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/quicksight_iam_policy_assignment",
			"resource \"aws_quicksight_iam_policy_assignment\" \"example\" {",
			"  assignment_name   = \"example\"",
			"  assignment_status = \"ENABLED\"",
			"  policy_arn        = aws_iam_policy.example.arn",
			"  identities {",
			"    user = [aws_quicksight_user.example.user_name]",
			"  }",
			"}"
		]
	},
	"rds_cluster": {
		"prefix": "rds_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster",
			"resource \"aws_rds_cluster\" \"default\" {",
			"  cluster_identifier      = \"aurora-cluster-demo\"",
			"  engine                  = \"aurora-mysql\"",
			"  engine_version          = \"5.7.mysql_aurora.2.03.2\"",
			"  availability_zones      = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
			"  database_name           = \"mydb\"",
			"  master_username         = \"foo\"",
			"  master_password         = \"bar\"",
			"  backup_retention_period = 5",
			"  preferred_backup_window = \"07:00-09:00\"",
			"}"
		]
	},
	"rds_cluster_instance": {
		"prefix": "rds_cluster_instance",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster_instance",
			"resource \"aws_rds_cluster_instance\" \"cluster_instances\" {",
			"  count              = 2",
			"  identifier         = \"aurora-cluster-demo-${count.index}\"",
			"  cluster_identifier = aws_rds_cluster.default.id",
			"  instance_class     = \"db.r4.large\"",
			"  engine             = aws_rds_cluster.default.engine",
			"  engine_version     = aws_rds_cluster.default.engine_version",
			"}",
			"",
			"resource \"aws_rds_cluster\" \"default\" {",
			"  cluster_identifier = \"aurora-cluster-demo\"",
			"  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
			"  database_name      = \"mydb\"",
			"  master_username    = \"foo\"",
			"  master_password    = \"barbut8chars\"",
			"}"
		]
	},
	"rds_cluster_parameter_group": {
		"prefix": "rds_cluster_parameter_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster_parameter_group",
			"resource \"aws_rds_cluster_parameter_group\" \"default\" {",
			"  name        = \"rds-cluster-pg\"",
			"  family      = \"aurora5.6\"",
			"  description = \"RDS default cluster parameter group\"",
			"",
			"  parameter {",
			"    name  = \"character_set_server\"",
			"    value = \"utf8\"",
			"  }",
			"",
			"  parameter {",
			"    name  = \"character_set_client\"",
			"    value = \"utf8\"",
			"  }",
			"}"
		]
	},
	"rds_cluster_role_association": {
		"prefix": "rds_cluster_role_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster_role_association",
			"resource \"aws_rds_cluster_role_association\" \"example\" {",
			"  db_cluster_identifier = aws_rds_cluster.example.id",
			"  feature_name          = \"S3_INTEGRATION\"",
			"  role_arn              = aws_iam_role.example.arn",
			"}"
		]
	},
	"rds_export_task": {
		"prefix": "rds_export_task",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_export_task",
			"resource \"aws_rds_export_task\" \"example\" {",
			"  export_task_identifier = \"example\"",
			"  source_arn             = aws_db_snapshot.example.db_snapshot_arn",
			"  s3_bucket_name         = aws_s3_bucket.example.id",
			"  iam_role_arn           = aws_iam_role.example.arn",
			"  kms_key_id             = aws_kms_key.example.arn",
			"}"
		]
	},
	"rds_global_cluster": {
		"prefix": "rds_global_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_global_cluster",
			"resource \"aws_rds_global_cluster\" \"example\" {",
			"  global_cluster_identifier = \"global-test\"",
			"  engine                    = \"aurora\"",
			"  engine_version            = \"5.6.mysql_aurora.1.22.2\"",
			"  database_name             = \"example_db\"",
			"}",
			"",
			"resource \"aws_rds_cluster\" \"primary\" {",
			"  provider                  = aws.primary",
			"  engine                    = aws_rds_global_cluster.example.engine",
			"  engine_version            = aws_rds_global_cluster.example.engine_version",
			"  cluster_identifier        = \"test-primary-cluster\"",
			"  master_username           = \"username\"",
			"  master_password           = \"somepass123\"",
			"  database_name             = \"example_db\"",
			"  global_cluster_identifier = aws_rds_global_cluster.example.id",
			"  db_subnet_group_name      = \"default\"",
			"}",
			"",
			"resource \"aws_rds_cluster_instance\" \"primary\" {",
			"  provider             = aws.primary",
			"  engine               = aws_rds_global_cluster.example.engine",
			"  engine_version       = aws_rds_global_cluster.example.engine_version",
			"  identifier           = \"test-primary-cluster-instance\"",
			"  cluster_identifier   = aws_rds_cluster.primary.id",
			"  instance_class       = \"db.r4.large\"",
			"  db_subnet_group_name = \"default\"",
			"}",
			"",
			"resource \"aws_rds_cluster\" \"secondary\" {",
			"  provider                  = aws.secondary",
			"  engine                    = aws_rds_global_cluster.example.engine",
			"  engine_version            = aws_rds_global_cluster.example.engine_version",
			"  cluster_identifier        = \"test-secondary-cluster\"",
			"  global_cluster_identifier = aws_rds_global_cluster.example.id",
			"  db_subnet_group_name      = \"default\"",
			"",
			"  depends_on = [",
			"    aws_rds_cluster_instance.primary",
			"  ]",
			"}",
			"",
			"resource \"aws_rds_cluster_instance\" \"secondary\" {",
			"  provider             = aws.secondary",
			"  engine               = aws_rds_global_cluster.example.engine",
			"  engine_version       = aws_rds_global_cluster.example.engine_version",
			"  identifier           = \"test-secondary-cluster-instance\"",
			"  cluster_identifier   = aws_rds_cluster.secondary.id",
			"  instance_class       = \"db.r4.large\"",
			"  db_subnet_group_name = \"default\"",
			"}"
		]
	},
	"redshift_cluster_iam_roles": {
		"prefix": "redshift_cluster_iam_roles",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/redshift_cluster_iam_roles",
			"resource \"aws_redshift_cluster_iam_roles\" \"example\" {",
			"  cluster_identifier = aws_redshift_cluster.example.cluster_identifier",
			"  iam_role_arns      = [aws_iam_role.example.arn]",
			"}"
		]
	},
	"route53_cidr_collection": {
		"prefix": "route53_cidr_collection",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_cidr_collection",
			"resource \"aws_route53_cidr_collection\" \"example\" {",
			"  name = \"collection-1\"",
			"}"
		]
	},
	"route53_delegation_set": {
		"prefix": "route53_delegation_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_delegation_set",
			"resource \"aws_route53_delegation_set\" \"main\" {",
			"  reference_name = \"DynDNS\"",
			"}",
			"",
			"resource \"aws_route53_zone\" \"primary\" {",
			"  name              = \"hashicorp.com\"",
			"  delegation_set_id = aws_route53_delegation_set.main.id",
			"}",
			"",
			"resource \"aws_route53_zone\" \"secondary\" {",
			"  name              = \"terraform.io\"",
			"  delegation_set_id = aws_route53_delegation_set.main.id",
			"}"
		]
	},
	"route53_health_check": {
		"prefix": "route53_health_check",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_health_check",
			"resource \"aws_route53_health_check\" \"example\" {",
			"  fqdn              = \"example.com\"",
			"  port              = 80",
			"  type              = \"HTTP\"",
			"  resource_path     = \"/\"",
			"  failure_threshold = \"5\"",
			"  request_interval  = \"30\"",
			"",
			"  tags = {",
			"    Name = \"tf-test-health-check\"",
			"  }",
			"}"
		]
	},
	"route53_record": {
		"prefix": "route53_record",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_record",
			"resource \"aws_route53_record\" \"www\" {",
			"  zone_id = aws_route53_zone.primary.zone_id",
			"  name    = \"www.example.com\"",
			"  type    = \"A\"",
			"  ttl     = 300",
			"  records = [aws_eip.lb.public_ip]",
			"}"
		]
	},
	"route53_resolver_endpoint": {
		"prefix": "route53_resolver_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_resolver_endpoint",
			"resource \"aws_route53_resolver_endpoint\" \"foo\" {",
			"  name      = \"foo\"",
			"  direction = \"INBOUND\"",
			"",
			"  security_group_ids = [",
			"    aws_security_group.sg1.id,",
			"    aws_security_group.sg2.id,",
			"  ]",
			"",
			"  ip_address {",
			"    subnet_id = aws_subnet.sn1.id",
			"  }",
			"",
			"  ip_address {",
			"    subnet_id = aws_subnet.sn2.id",
			"    ip        = \"10.0.64.4\"",
			"  }",
			"",
			"  tags = {",
			"    Environment = \"Prod\"",
			"  }",
			"}"
		]
	},
	"route53_resolver_firewall_domain_list": {
		"prefix": "route53_resolver_firewall_domain_list",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_resolver_firewall_domain_list",
			"resource \"aws_route53_resolver_firewall_domain_list\" \"example\" {",
			"  name = \"example\"",
			"}"
		]
	},
	"route53_resolver_firewall_rule_group": {
		"prefix": "route53_resolver_firewall_rule_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_resolver_firewall_rule_group",
			"resource \"aws_route53_resolver_firewall_rule_group\" \"example\" {",
			"  name = \"example\"",
			"}"
		]
	},
	"route53_resolver_query_log_config": {
		"prefix": "route53_resolver_query_log_config",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_resolver_query_log_config",
			"resource \"aws_route53_resolver_query_log_config\" \"example\" {",
			"  name            = \"example\"",
			"  destination_arn = aws_s3_bucket.example.arn",
			"",
			"  tags = {",
			"    Environment = \"Prod\"",
			"  }",
			"}"
		]
	},
	"route53_resolver_query_log_config_association": {
		"prefix": "route53_resolver_query_log_config_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_resolver_query_log_config_association",
			"resource \"aws_route53_resolver_query_log_config_association\" \"example\" {",
			"  resolver_query_log_config_id = aws_route53_resolver_query_log_config.example.id",
			"  resource_id                  = aws_vpc.example.id",
			"}"
		]
	},
	"route53_resolver_rule": {
		"prefix": "route53_resolver_rule",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_resolver_rule",
			"resource \"aws_route53_resolver_rule\" \"sys\" {",
			"  domain_name = \"subdomain.example.com\"",
			"  rule_type   = \"SYSTEM\"",
			"}"
		]
	},
	"route53_resolver_rule_association": {
		"prefix": "route53_resolver_rule_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_resolver_rule_association",
			"resource \"aws_route53_resolver_rule_association\" \"example\" {",
			"  resolver_rule_id = aws_route53_resolver_rule.sys.id",
			"  vpc_id           = aws_vpc.foo.id",
			"}"
		]
	},
	"route53_traffic_policy": {
		"prefix": "route53_traffic_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_traffic_policy",
			"resource \"aws_route53_traffic_policy\" \"example\" {",
			"  name     = \"example\"",
			"  comment  = \"example comment\"",
			"  document = <<EOF",
			"{",
			"  \"AWSPolicyFormatVersion\": \"2015-10-01\",",
			"  \"RecordType\": \"A\",",
			"  \"Endpoints\": {",
			"    \"endpoint-start-NkPh\": {",
			"      \"Type\": \"value\",",
			"      \"Value\": \"10.0.0.2\"",
			"    }",
			"  },",
			"  \"StartEndpoint\": \"endpoint-start-NkPh\"",
			"}",
			"EOF",
			"}"
		]
	},
	"route53_traffic_policy_instance": {
		"prefix": "route53_traffic_policy_instance",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_traffic_policy_instance",
			"resource \"aws_route53_traffic_policy_instance\" \"test\" {",
			"  name                   = \"test.example.com\"",
			"  traffic_policy_id      = \"b3gb108f-ea6f-45a5-baab-9d112d8b4037\"",
			"  traffic_policy_version = 1",
			"  hosted_zone_id         = \"Z033120931TAQO548OGJC\"",
			"  ttl                    = 360",
			"}"
		]
	},
	"route53_zone": {
		"prefix": "route53_zone",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_zone",
			"resource \"aws_route53_zone\" \"primary\" {",
			"  name = \"example.com\"",
			"}"
		]
	},
	"route53domains_registered_domain": {
		"prefix": "route53domains_registered_domain",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53domains_registered_domain",
			"resource \"aws_route53domains_registered_domain\" \"example\" {",
			"  domain_name = \"example.com\"",
			"",
			"  name_server {",
			"    name = \"ns-195.awsdns-24.com\"",
			"  }",
			"",
			"  name_server {",
			"    name = \"ns-874.awsdns-45.net\"",
			"  }",
			"",
			"  tags = {",
			"    Environment = \"test\"",
			"  }",
			"}"
		]
	},
	"route53recoverycontrolconfig_cluster": {
		"prefix": "route53recoverycontrolconfig_cluster",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53recoverycontrolconfig_cluster",
			"resource \"aws_route53recoverycontrolconfig_cluster\" \"example\" {",
			"  name = \"georgefitzgerald\"",
			"}"
		]
	},
	"route53recoverycontrolconfig_control_panel": {
		"prefix": "route53recoverycontrolconfig_control_panel",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53recoverycontrolconfig_control_panel",
			"resource \"aws_route53recoverycontrolconfig_control_panel\" \"example\" {",
			"  name        = \"balmorhea\"",
			"  cluster_arn = \"arn:aws:route53-recovery-control::123456789012:cluster/8d47920e-d789-437d-803a-2dcc4b204393\"",
			"}"
		]
	},
	"route53recoverycontrolconfig_routing_control": {
		"prefix": "route53recoverycontrolconfig_routing_control",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53recoverycontrolconfig_routing_control",
			"resource \"aws_route53recoverycontrolconfig_routing_control\" \"example\" {",
			"  name        = \"tinlicker\"",
			"  cluster_arn = \"arn:aws:route53-recovery-control::881188118811:cluster/8d47920e-d789-437d-803a-2dcc4b204393\"",
			"}"
		]
	},
	"route53recoverycontrolconfig_safety_rule": {
		"prefix": "route53recoverycontrolconfig_safety_rule",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53recoverycontrolconfig_safety_rule",
			"resource \"aws_route53recoverycontrolconfig_safety_rule\" \"example\" {",
			"  asserted_controls = [aws_route53recoverycontrolconfig_routing_control.example.arn]",
			"  control_panel_arn = \"arn:aws:route53-recovery-control::313517334327:controlpanel/abd5fbfc052d4844a082dbf400f61da8\"",
			"  name              = \"daisyguttridge\"",
			"  wait_period_ms    = 5000",
			"",
			"  rule_config {",
			"    inverted  = false",
			"    threshold = 1",
			"    type      = \"ATLEAST\"",
			"  }",
			"}"
		]
	},
	"route53recoveryreadiness_cell": {
		"prefix": "route53recoveryreadiness_cell",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53recoveryreadiness_cell",
			"resource \"aws_route53recoveryreadiness_cell\" \"example\" {",
			"  cell_name = \"us-west-2-failover-cell\"",
			"}"
		]
	},
	"route53recoveryreadiness_readiness_check": {
		"prefix": "route53recoveryreadiness_readiness_check",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53recoveryreadiness_readiness_check",
			"resource \"aws_route53recoveryreadiness_readiness_check\" \"example\" {",
			"  readiness_check_name = my-cw-alarm-check",
			"  resource_set_name    = my-cw-alarm-set",
			"}"
		]
	},
	"route53recoveryreadiness_recovery_group": {
		"prefix": "route53recoveryreadiness_recovery_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53recoveryreadiness_recovery_group",
			"resource \"aws_route53recoveryreadiness_recovery_group\" \"example\" {",
			"  recovery_group_name = \"my-high-availability-app\"",
			"}"
		]
	},
	"route53recoveryreadiness_resource_set": {
		"prefix": "route53recoveryreadiness_resource_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53recoveryreadiness_resource_set",
			"resource \"aws_route53recoveryreadiness_resource_set\" \"example\" {",
			"  resource_set_name = my-cw-alarm-set",
			"  resource_set_type = \"AWS::CloudWatch::Alarm\"",
			"",
			"  resources {",
			"    resource_arn = aws_cloudwatch_metric_alarm.example.arn",
			"  }",
			"}"
		]
	},
	"s3_account_public_access_block": {
		"prefix": "s3_account_public_access_block",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_account_public_access_block",
			"resource \"aws_s3_account_public_access_block\" \"example\" {",
			"  block_public_acls   = true",
			"  block_public_policy = true",
			"}"
		]
	},
	"s3_bucket": {
		"prefix": "s3_bucket",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket",
			"resource \"aws_s3_bucket\" \"example\" {",
			"  bucket = \"my-tf-test-bucket\"",
			"",
			"  tags = {",
			"    Name        = \"My bucket\"",
			"    Environment = \"Dev\"",
			"  }",
			"}"
		]
	},
	"s3_bucket_analytics_configuration": {
		"prefix": "s3_bucket_analytics_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_analytics_configuration",
			"resource \"aws_s3_bucket_analytics_configuration\" \"example-entire-bucket\" {",
			"  bucket = aws_s3_bucket.example.id",
			"  name   = \"EntireBucket\"",
			"",
			"  storage_class_analysis {",
			"    data_export {",
			"      destination {",
			"        s3_bucket_destination {",
			"          bucket_arn = aws_s3_bucket.analytics.arn",
			"        }",
			"      }",
			"    }",
			"  }",
			"}",
			"",
			"resource \"aws_s3_bucket\" \"example\" {",
			"  bucket = \"example\"",
			"}",
			"",
			"resource \"aws_s3_bucket\" \"analytics\" {",
			"  bucket = \"analytics destination\"",
			"}"
		]
	},
	"s3_bucket_intelligent_tiering_configuration": {
		"prefix": "s3_bucket_intelligent_tiering_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_intelligent_tiering_configuration",
			"resource \"aws_s3_bucket_intelligent_tiering_configuration\" \"example-entire-bucket\" {",
			"  bucket = aws_s3_bucket.example.id",
			"  name   = \"EntireBucket\"",
			"",
			"  tiering {",
			"    access_tier = \"DEEP_ARCHIVE_ACCESS\"",
			"    days        = 180",
			"  }",
			"  tiering {",
			"    access_tier = \"ARCHIVE_ACCESS\"",
			"    days        = 125",
			"  }",
			"}",
			"",
			"resource \"aws_s3_bucket\" \"example\" {",
			"  bucket = \"example\"",
			"}"
		]
	},
	"s3_bucket_lifecycle_configuration": {
		"prefix": "s3_bucket_lifecycle_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_lifecycle_configuration",
			"resource \"aws_s3_bucket_lifecycle_configuration\" \"example\" {",
			"  bucket = aws_s3_bucket.bucket.id",
			"",
			"  rule {",
			"    id = \"rule-1\"",
			"",
			"    # ... other transition/expiration actions ...",
			"",
			"    status = \"Enabled\"",
			"  }",
			"}"
		]
	},
	"s3_bucket_object": {
		"prefix": "s3_bucket_object",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_object",
			"resource \"aws_s3_bucket_object\" \"object\" {",
			"  bucket = \"your_bucket_name\"",
			"  key    = \"new_object_key\"",
			"  source = \"path/to/file\"",
			"",
			"  # The filemd5() function is available in Terraform 0.11.12 and later",
			"  # For Terraform 0.11.11 and earlier, use the md5() function and the file() function:",
			"  # etag = \"${md5(file(\"path/to/file\"))}\"",
			"  etag = filemd5(\"path/to/file\")",
			"}"
		]
	},
	"s3_bucket_object_lock_configuration": {
		"prefix": "s3_bucket_object_lock_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_object_lock_configuration",
			"resource \"aws_s3_bucket_object_lock_configuration\" \"example\" {",
			"  bucket = aws_s3_bucket.example.id",
			"",
			"  rule {",
			"    default_retention {",
			"      mode = \"COMPLIANCE\"",
			"      days = 5",
			"    }",
			"  }",
			"",
			"  token = \"NG2MKsfoLqV3A+aquXneSG4LOu/ekrlXkRXwIPFVfERT7XOPos+/k444d7RIH0E3W3p5QU6ml2exS2F/eYCFmMWHJ3hFZGk6al1sIJkmNhUMYmsv0jYVQyTTZNLM+DnfooA6SATt39mM1VW1yJh4E+XljMlWzaBwHKbss3/EjlGDjOmVhaSs4Z6427mMCaFD0RLwsYY7zX49gEc31YfOMJGxbXCXSeyNwAhhM/A8UH7gQf38RmjHjjAFbbbLtl8arsxTPW8F1IYohqwmKIr9DnotLLj8Tg44U2SPwujVaqmlKKP9s41rfgb4UbIm7khSafDBng0LGfxC4pMlT9Ny2w==\"",
			"}"
		]
	},
	"s3_bucket_request_payment_configuration": {
		"prefix": "s3_bucket_request_payment_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_request_payment_configuration",
			"resource \"aws_s3_bucket_request_payment_configuration\" \"example\" {",
			"  bucket = aws_s3_bucket.example.id",
			"  payer  = \"Requester\"",
			"}"
		]
	},
	"s3_bucket_website_configuration": {
		"prefix": "s3_bucket_website_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_website_configuration",
			"resource \"aws_s3_bucket_website_configuration\" \"example\" {",
			"  bucket = aws_s3_bucket.example.id",
			"",
			"  index_document {",
			"    suffix = \"index.html\"",
			"  }",
			"",
			"  error_document {",
			"    key = \"error.html\"",
			"  }",
			"",
			"  routing_rule {",
			"    condition {",
			"      key_prefix_equals = \"docs/\"",
			"    }",
			"    redirect {",
			"      replace_key_prefix_with = \"documents/\"",
			"    }",
			"  }",
			"}"
		]
	},
	"s3_object": {
		"prefix": "s3_object",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_object",
			"resource \"aws_s3_object\" \"object\" {",
			"  bucket = \"your_bucket_name\"",
			"  key    = \"new_object_key\"",
			"  source = \"path/to/file\"",
			"",
			"  # The filemd5() function is available in Terraform 0.11.12 and later",
			"  # For Terraform 0.11.11 and earlier, use the md5() function and the file() function:",
			"  # etag = \"${md5(file(\"path/to/file\"))}\"",
			"  etag = filemd5(\"path/to/file\")",
			"}"
		]
	},
	"s3_object_copy": {
		"prefix": "s3_object_copy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_object_copy",
			"resource \"aws_s3_object_copy\" \"test\" {",
			"  bucket = \"destination_bucket\"",
			"  key    = \"destination_key\"",
			"  source = \"source_bucket/source_key\"",
			"",
			"  grant {",
			"    uri         = \"http://acs.amazonaws.com/groups/global/AllUsers\"",
			"    type        = \"Group\"",
			"    permissions = [\"READ\"]",
			"  }",
			"}"
		]
	},
	"s3control_bucket": {
		"prefix": "s3control_bucket",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3control_bucket",
			"resource \"aws_s3control_bucket\" \"example\" {",
			"  bucket     = \"example\"",
			"  outpost_id = data.aws_outposts_outpost.example.id",
			"}"
		]
	},
	"s3control_bucket_lifecycle_configuration": {
		"prefix": "s3control_bucket_lifecycle_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3control_bucket_lifecycle_configuration",
			"resource \"aws_s3control_bucket_lifecycle_configuration\" \"example\" {",
			"  bucket = aws_s3control_bucket.example.arn",
			"",
			"  rule {",
			"    expiration {",
			"      days = 365",
			"    }",
			"",
			"    filter {",
			"      prefix = \"logs/\"",
			"    }",
			"",
			"    id = \"logs\"",
			"  }",
			"",
			"  rule {",
			"    expiration {",
			"      days = 7",
			"    }",
			"",
			"    filter {",
			"      prefix = \"temp/\"",
			"    }",
			"",
			"    id = \"temp\"",
			"  }",
			"}"
		]
	},
	"s3control_bucket_policy": {
		"prefix": "s3control_bucket_policy",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3control_bucket_policy",
			"resource \"aws_s3control_bucket_policy\" \"example\" {",
			"  bucket = aws_s3control_bucket.example.arn",
			"  policy = jsonencode({",
			"    Id = \"testBucketPolicy\"",
			"    Statement = [",
			"      {",
			"        Action = \"s3-outposts:PutBucketLifecycleConfiguration\"",
			"        Effect = \"Deny\"",
			"        Principal = {",
			"          AWS = \"*\"",
			"        }",
			"        Resource = aws_s3control_bucket.example.arn",
			"        Sid      = \"statement1\"",
			"      }",
			"    ]",
			"    Version = \"2012-10-17\"",
			"  })",
			"}"
		]
	},
	"s3outposts_endpoint": {
		"prefix": "s3outposts_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3outposts_endpoint",
			"resource \"aws_s3outposts_endpoint\" \"example\" {",
			"  outpost_id        = data.aws_outposts_outpost.example.id",
			"  security_group_id = aws_security_group.example.id",
			"  subnet_id         = aws_subnet.example.id",
			"}"
		]
	},
	"sagemaker_code_repository": {
		"prefix": "sagemaker_code_repository",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sagemaker_code_repository",
			"resource \"aws_sagemaker_code_repository\" \"example\" {",
			"  code_repository_name = \"example\"",
			"",
			"  git_config {",
			"    repository_url = \"https://github.com/hashicorp/terraform-provider-aws.git\"",
			"  }",
			"}"
		]
	},
	"secretsmanager_secret": {
		"prefix": "secretsmanager_secret",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/secretsmanager_secret",
			"resource \"aws_secretsmanager_secret\" \"example\" {",
			"  name = \"example\"",
			"}"
		]
	},
	"secretsmanager_secret_rotation": {
		"prefix": "secretsmanager_secret_rotation",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/secretsmanager_secret_rotation",
			"resource \"aws_secretsmanager_secret_rotation\" \"example\" {",
			"  secret_id           = aws_secretsmanager_secret.example.id",
			"  rotation_lambda_arn = aws_lambda_function.example.arn",
			"",
			"  rotation_rules {",
			"    automatically_after_days = 30",
			"  }",
			"}"
		]
	},
	"secretsmanager_secret_version": {
		"prefix": "secretsmanager_secret_version",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/secretsmanager_secret_version",
			"resource \"aws_secretsmanager_secret_version\" \"example\" {",
			"  secret_id     = aws_secretsmanager_secret.example.id",
			"  secret_string = \"example-string-to-protect\"",
			"}"
		]
	},
	"ses_active_receipt_rule_set": {
		"prefix": "ses_active_receipt_rule_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_active_receipt_rule_set",
			"resource \"aws_ses_active_receipt_rule_set\" \"main\" {",
			"  rule_set_name = \"primary-rules\"",
			"}"
		]
	},
	"ses_configuration_set": {
		"prefix": "ses_configuration_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_configuration_set",
			"resource \"aws_ses_configuration_set\" \"test\" {",
			"  name = \"some-configuration-set-test\"",
			"}"
		]
	},
	"ses_domain_identity": {
		"prefix": "ses_domain_identity",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_domain_identity",
			"resource \"aws_ses_domain_identity\" \"example\" {",
			"  domain = \"example.com\"",
			"}"
		]
	},
	"ses_domain_mail_from": {
		"prefix": "ses_domain_mail_from",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_domain_mail_from",
			"resource \"aws_ses_domain_mail_from\" \"example\" {",
			"  domain           = aws_ses_domain_identity.example.domain",
			"  mail_from_domain = \"bounce.${aws_ses_domain_identity.example.domain}\"",
			"}",
			"",
			"# Example SES Domain Identity",
			"resource \"aws_ses_domain_identity\" \"example\" {",
			"  domain = \"example.com\"",
			"}",
			"",
			"# Example Route53 MX record",
			"resource \"aws_route53_record\" \"example_ses_domain_mail_from_mx\" {",
			"  zone_id = aws_route53_zone.example.id",
			"  name    = aws_ses_domain_mail_from.example.mail_from_domain",
			"  type    = \"MX\"",
			"  ttl     = \"600\"",
			"  records = [\"10 feedback-smtp.us-east-1.amazonses.com\"] # Change to the region in which `aws_ses_domain_identity.example` is created",
			"}",
			"",
			"# Example Route53 TXT record for SPF",
			"resource \"aws_route53_record\" \"example_ses_domain_mail_from_txt\" {",
			"  zone_id = aws_route53_zone.example.id",
			"  name    = aws_ses_domain_mail_from.example.mail_from_domain",
			"  type    = \"TXT\"",
			"  ttl     = \"600\"",
			"  records = [\"v=spf1 include:amazonses.com -all\"]",
			"}"
		]
	},
	"ses_email_identity": {
		"prefix": "ses_email_identity",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_email_identity",
			"resource \"aws_ses_email_identity\" \"example\" {",
			"  email = \"email@example.com\"",
			"}"
		]
	},
	"ses_event_destination": {
		"prefix": "ses_event_destination",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_event_destination",
			"resource \"aws_ses_event_destination\" \"cloudwatch\" {",
			"  name                   = \"event-destination-cloudwatch\"",
			"  configuration_set_name = aws_ses_configuration_set.example.name",
			"  enabled                = true",
			"  matching_types         = [\"bounce\", \"send\"]",
			"",
			"  cloudwatch_destination {",
			"    default_value  = \"default\"",
			"    dimension_name = \"dimension\"",
			"    value_source   = \"emailHeader\"",
			"  }",
			"}"
		]
	},
	"ses_identity_notification_topic": {
		"prefix": "ses_identity_notification_topic",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_identity_notification_topic",
			"resource \"aws_ses_identity_notification_topic\" \"test\" {",
			"  topic_arn                = aws_sns_topic.example.arn",
			"  notification_type        = \"Bounce\"",
			"  identity                 = aws_ses_domain_identity.example.domain",
			"  include_original_headers = true",
			"}"
		]
	},
	"ses_receipt_filter": {
		"prefix": "ses_receipt_filter",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_receipt_filter",
			"resource \"aws_ses_receipt_filter\" \"filter\" {",
			"  name   = \"block-spammer\"",
			"  cidr   = \"10.10.10.10\"",
			"  policy = \"Block\"",
			"}"
		]
	},
	"ses_receipt_rule_set": {
		"prefix": "ses_receipt_rule_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_receipt_rule_set",
			"resource \"aws_ses_receipt_rule_set\" \"main\" {",
			"  rule_set_name = \"primary-rules\"",
			"}"
		]
	},
	"ses_template": {
		"prefix": "ses_template",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ses_template",
			"resource \"aws_ses_template\" \"MyTemplate\" {",
			"  name    = \"MyTemplate\"",
			"  subject = \"Greetings, {{name}}!\"",
			"  html    = \"<h1>Hello {{name}},</h1><p>Your favorite animal is {{favoriteanimal}}.</p>\"",
			"  text    = \"Hello {{name}},\r\nYour favorite animal is {{favoriteanimal}}.\"",
			"}"
		]
	},
	"sesv2_configuration_set": {
		"prefix": "sesv2_configuration_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sesv2_configuration_set",
			"resource \"aws_sesv2_configuration_set\" \"example\" {",
			"  configuration_set_name = \"example\"",
			"",
			"  delivery_options {",
			"    tls_policy = \"REQUIRE\"",
			"  }",
			"",
			"  reputation_options {",
			"    reputation_metrics_enabled = false",
			"  }",
			"",
			"  sending_options {",
			"    sending_enabled = true",
			"  }",
			"",
			"  suppression_options {",
			"    suppressed_reasons = [\"BOUNCE\", \"COMPLAINT\"]",
			"  }",
			"",
			"  tracking_options {",
			"    custom_redirect_domain = \"example.com\"",
			"  }",
			"}"
		]
	},
	"sesv2_contact_list": {
		"prefix": "sesv2_contact_list",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sesv2_contact_list",
			"resource \"aws_sesv2_contact_list\" \"example\" {",
			"  contact_list_name = \"example\"",
			"}"
		]
	},
	"sesv2_dedicated_ip_assignment": {
		"prefix": "sesv2_dedicated_ip_assignment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sesv2_dedicated_ip_assignment",
			"resource \"aws_sesv2_dedicated_ip_assignment\" \"example\" {",
			"  ip                    = \"0.0.0.0\"",
			"  destination_pool_name = \"my-pool\"",
			"}"
		]
	},
	"sesv2_dedicated_ip_pool": {
		"prefix": "sesv2_dedicated_ip_pool",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sesv2_dedicated_ip_pool",
			"resource \"aws_sesv2_dedicated_ip_pool\" \"example\" {",
			"  pool_name = \"my-pool\"",
			"}"
		]
	},
	"sesv2_email_identity": {
		"prefix": "sesv2_email_identity",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sesv2_email_identity",
			"resource \"aws_sesv2_email_identity\" \"example\" {",
			"  email_identity = \"testing@example.com\"",
			"}"
		]
	},
	"simpledb_domain": {
		"prefix": "simpledb_domain",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/simpledb_domain",
			"resource \"aws_simpledb_domain\" \"users\" {",
			"  name = \"users\"",
			"}"
		]
	},
	"sqs_queue": {
		"prefix": "sqs_queue",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue",
			"resource \"aws_sqs_queue\" \"terraform_queue\" {",
			"  name                      = \"terraform-example-queue\"",
			"  delay_seconds             = 90",
			"  max_message_size          = 2048",
			"  message_retention_seconds = 86400",
			"  receive_wait_time_seconds = 10",
			"  redrive_policy = jsonencode({",
			"    deadLetterTargetArn = aws_sqs_queue.terraform_queue_deadletter.arn",
			"    maxReceiveCount     = 4",
			"  })",
			"",
			"  tags = {",
			"    Environment = \"production\"",
			"  }",
			"}"
		]
	},
	"ssm_default_patch_baseline": {
		"prefix": "ssm_default_patch_baseline",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ssm_default_patch_baseline",
			"resource \"aws_ssm_default_patch_baseline\" \"example\" {",
			"  baseline_id      = aws_ssm_patch_baseline.example.id",
			"  operating_system = aws_ssm_patch_baseline.example.operating_system",
			"}",
			"",
			"resource \"aws_ssm_patch_baseline\" \"example\" {",
			"  name             = \"example\"",
			"  approved_patches = [\"KB123456\"]",
			"}"
		]
	},
	"vpc": {
		"prefix": "vpc",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc",
			"resource \"aws_vpc\" \"main\" {",
			"  cidr_block = \"10.0.0.0/16\"",
			"}"
		]
	},
	"vpc_dhcp_options": {
		"prefix": "vpc_dhcp_options",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_dhcp_options",
			"resource \"aws_vpc_dhcp_options\" \"dns_resolver\" {",
			"  domain_name_servers = [\"8.8.8.8\", \"8.8.4.4\"]",
			"}"
		]
	},
	"vpc_dhcp_options_association": {
		"prefix": "vpc_dhcp_options_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_dhcp_options_association",
			"resource \"aws_vpc_dhcp_options_association\" \"dns_resolver\" {",
			"  vpc_id          = aws_vpc.foo.id",
			"  dhcp_options_id = aws_vpc_dhcp_options.foo.id",
			"}"
		]
	},
	"vpc_endpoint": {
		"prefix": "vpc_endpoint",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_endpoint",
			"resource \"aws_vpc_endpoint\" \"s3\" {",
			"  vpc_id       = aws_vpc.main.id",
			"  service_name = \"com.amazonaws.us-west-2.s3\"",
			"}"
		]
	},
	"vpc_endpoint_route_table_association": {
		"prefix": "vpc_endpoint_route_table_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_endpoint_route_table_association",
			"resource \"aws_vpc_endpoint_route_table_association\" \"example\" {",
			"  route_table_id  = aws_route_table.example.id",
			"  vpc_endpoint_id = aws_vpc_endpoint.example.id",
			"}"
		]
	},
	"vpc_endpoint_security_group_association": {
		"prefix": "vpc_endpoint_security_group_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_endpoint_security_group_association",
			"resource \"aws_vpc_endpoint_security_group_association\" \"sg_ec2\" {",
			"  vpc_endpoint_id   = aws_vpc_endpoint.ec2.id",
			"  security_group_id = aws_security_group.sg.id",
			"}"
		]
	},
	"vpc_endpoint_service": {
		"prefix": "vpc_endpoint_service",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_endpoint_service",
			"resource \"aws_vpc_endpoint_service\" \"example\" {",
			"  acceptance_required        = false",
			"  network_load_balancer_arns = [aws_lb.example.arn]",
			"}"
		]
	},
	"vpc_endpoint_subnet_association": {
		"prefix": "vpc_endpoint_subnet_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_endpoint_subnet_association",
			"resource \"aws_vpc_endpoint_subnet_association\" \"sn_ec2\" {",
			"  vpc_endpoint_id = aws_vpc_endpoint.ec2.id",
			"  subnet_id       = aws_subnet.sn.id",
			"}"
		]
	},
	"vpc_ipam": {
		"prefix": "vpc_ipam",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_ipam",
			"resource \"aws_vpc_ipam\" \"main\" {",
			"  description = \"multi region ipam\"",
			"  dynamic operating_regions {",
			"    for_each = local.all_ipam_regions",
			"    content {",
			"      region_name = operating_regions.value",
			"    }",
			"  }",
			"}",
			"",
			"data \"aws_region\" \"current\" {}",
			"",
			"variable \"ipam_regions\" {",
			"  type    = list",
			"  default = [\"us-east-1\", \"us-west-2\"]",
			"}",
			"",
			"locals {",
			"  # ensure current provider region is an operating_regions entry",
			"  all_ipam_regions = distinct(concat([data.aws_region.current.name], var.ipam_regions))",
			"}"
		]
	},
	"vpc_ipam_organization_admin_account": {
		"prefix": "vpc_ipam_organization_admin_account",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_ipam_organization_admin_account",
			"resource \"aws_vpc_ipam_organization_admin_account\" \"example\" {",
			"  delegated_admin_account_id = data.aws_caller_identity.delegated.account_id",
			"}",
			"",
			"data \"aws_caller_identity\" \"delegated\" {",
			"  provider = aws.ipam_delegate_account",
			"}",
			"",
			"provider \"aws\" {",
			"  alias = \"ipam_delegate_account\"",
			"",
			"  # authentication arguments omitted",
			"}"
		]
	},
	"vpc_ipam_resource_discovery_association": {
		"prefix": "vpc_ipam_resource_discovery_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_ipam_resource_discovery_association",
			"resource \"aws_vpc_ipam_resource_discovery_association\" \"test\" {",
			"  ipam_id                    = aws_vpc_ipam.test.id",
			"  ipam_resource_discovery_id = aws_vpc_ipam_resource_discovery.test.id",
			"",
			"  tags = {",
			"    \"Name\" = \"test\"",
			"  }",
			"}"
		]
	},
	"vpc_network_performance_metric_subscription": {
		"prefix": "vpc_network_performance_metric_subscription",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_network_performance_metric_subscription",
			"resource \"aws_vpc_network_performance_metric_subscription\" \"example\" {",
			"  source      = \"us-east-1\"",
			"  destination = \"us-west-1\"",
			"}"
		]
	},
	"vpc_peering_connection": {
		"prefix": "vpc_peering_connection",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_peering_connection",
			"resource \"aws_vpc_peering_connection\" \"foo\" {",
			"  peer_owner_id = var.peer_owner_id",
			"  peer_vpc_id   = aws_vpc.bar.id",
			"  vpc_id        = aws_vpc.foo.id",
			"}"
		]
	},
	"vpc_peering_connection_accepter": {
		"prefix": "vpc_peering_connection_accepter",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_peering_connection_accepter",
			"resource \"aws_vpc_peering_connection_accepter\" \"example\" {",
			"  # ... other configuration ...",
			"",
			"  # There is no AWS EC2 API for reading auto_accept",
			"  lifecycle {",
			"    ignore_changes = [auto_accept]",
			"  }",
			"}"
		]
	},
	"vpc_security_group_egress_rule": {
		"prefix": "vpc_security_group_egress_rule",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_security_group_egress_rule",
			"resource \"aws_vpc_security_group_egress_rule\" \"example\" {",
			"  security_group_id = aws_security_group.example.id",
			"",
			"  cidr_ipv4   = \"10.0.0.0/8\"",
			"  from_port   = 80",
			"  ip_protocol = \"tcp\"",
			"  to_port     = 80",
			"}"
		]
	},
	"vpc_security_group_ingress_rule": {
		"prefix": "vpc_security_group_ingress_rule",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_security_group_ingress_rule",
			"resource \"aws_vpc_security_group_ingress_rule\" \"example\" {",
			"  security_group_id = aws_security_group.example.id",
			"",
			"  cidr_ipv4   = \"10.0.0.0/8\"",
			"  from_port   = 80",
			"  ip_protocol = \"tcp\"",
			"  to_port     = 80",
			"}"
		]
	},
	"vpclattice_access_log_subscription": {
		"prefix": "vpclattice_access_log_subscription",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpclattice_access_log_subscription",
			"resource \"aws_vpclattice_access_log_subscription\" \"example\" {",
			"  resource_identifier = aws_vpclattice_service_network.example.id",
			"  destination_arn     = aws_s3.bucket.arn",
			"}"
		]
	},
	"vpclattice_listener_rule": {
		"prefix": "vpclattice_listener_rule",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpclattice_listener_rule",
			"resource \"aws_vpclattice_listener_rule\" \"test\" {",
			"  name                = \"example\"",
			"  listener_identifier = aws_vpclattice_listener.example.listener_id",
			"  service_identifier  = aws_vpclattice_service.example.id",
			"  priority            = 20",
			"  match {",
			"    http_match {",
			"",
			"      header_matches {",
			"        name           = \"example-header\"",
			"        case_sensitive = false",
			"",
			"        match {",
			"          exact = \"example-contains\"",
			"        }",
			"      }",
			"",
			"      path_match {",
			"        case_sensitive = true",
			"        match {",
			"          prefix = \"/example-path\"",
			"        }",
			"      }",
			"    }",
			"  }",
			"  action {",
			"    forward {",
			"      target_groups {",
			"        target_group_identifier = aws_vpclattice_target_group.example.id",
			"        weight                  = 1",
			"      }",
			"      target_groups {",
			"        target_group_identifier = aws_vpclattice_target_group.example2.id",
			"        weight                  = 2",
			"      }",
			"    }",
			"",
			"  }",
			"}"
		]
	},
	"vpclattice_service": {
		"prefix": "vpclattice_service",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpclattice_service",
			"resource \"aws_vpclattice_service\" \"example\" {",
			"  name               = \"example\"",
			"  auth_type          = \"AWS_IAM\"",
			"  custom_domain_name = \"example.com\"",
			"}"
		]
	},
	"vpclattice_service_network": {
		"prefix": "vpclattice_service_network",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpclattice_service_network",
			"resource \"aws_vpclattice_service_network\" \"example\" {",
			"  name      = \"example\"",
			"  auth_type = \"AWS_IAM\"",
			"}"
		]
	},
	"vpclattice_service_network_service_association": {
		"prefix": "vpclattice_service_network_service_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpclattice_service_network_service_association",
			"resource \"aws_vpclattice_service_network_service_association\" \"example\" {",
			"  service_identifier         = aws_vpclattice_service.example.id",
			"  service_network_identifier = aws_vpclattice_service_network.example.id",
			"}"
		]
	},
	"vpclattice_service_network_vpc_association": {
		"prefix": "vpclattice_service_network_vpc_association",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpclattice_service_network_vpc_association",
			"resource \"aws_vpclattice_service_network_vpc_association\" \"example\" {",
			"  vpc_identifier             = aws_vpc.example.id",
			"  service_network_identifier = aws_vpclattice_service_network.example.id",
			"  security_group_ids         = [aws_security_group.example.id]",
			"}"
		]
	},
	"vpclattice_target_group": {
		"prefix": "vpclattice_target_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpclattice_target_group",
			"resource \"aws_vpclattice_target_group\" \"example\" {",
			"  name = \"example\"",
			"  type = \"INSTANCE\"",
			"  config {",
			"    port           = 443",
			"    protocol       = \"HTTPS\"",
			"    vpc_identifier = aws_vpc.example.id",
			"  }",
			"}"
		]
	},
	"vpclattice_target_group_attachment": {
		"prefix": "vpclattice_target_group_attachment",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpclattice_target_group_attachment",
			"resource \"aws_vpclattice_target_group_attachment\" \"example\" {",
			"  target_group_identifier = aws_vpclattice_target_group.example.id",
			"",
			"  target {",
			"    id   = aws_lb.example.arn",
			"    port = 80",
			"  }",
			"}"
		]
	},
	"waf_byte_match_set": {
		"prefix": "waf_byte_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_byte_match_set",
			"resource \"aws_waf_byte_match_set\" \"byte_set\" {",
			"  name = \"tf_waf_byte_match_set\"",
			"",
			"  byte_match_tuples {",
			"    text_transformation   = \"NONE\"",
			"    target_string         = \"badrefer1\"",
			"    positional_constraint = \"CONTAINS\"",
			"",
			"    field_to_match {",
			"      type = \"HEADER\"",
			"      data = \"referer\"",
			"    }",
			"  }",
			"}"
		]
	},
	"waf_geo_match_set": {
		"prefix": "waf_geo_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_geo_match_set",
			"resource \"aws_waf_geo_match_set\" \"geo_match_set\" {",
			"  name = \"geo_match_set\"",
			"",
			"  geo_match_constraint {",
			"    type  = \"Country\"",
			"    value = \"US\"",
			"  }",
			"",
			"  geo_match_constraint {",
			"    type  = \"Country\"",
			"    value = \"CA\"",
			"  }",
			"}"
		]
	},
	"waf_ipset": {
		"prefix": "waf_ipset",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_ipset",
			"resource \"aws_waf_ipset\" \"ipset\" {",
			"  name = \"tfIPSet\"",
			"",
			"  ip_set_descriptors {",
			"    type  = \"IPV4\"",
			"    value = \"192.0.7.0/24\"",
			"  }",
			"",
			"  ip_set_descriptors {",
			"    type  = \"IPV4\"",
			"    value = \"10.16.16.0/16\"",
			"  }",
			"}"
		]
	},
	"waf_regex_match_set": {
		"prefix": "waf_regex_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_regex_match_set",
			"resource \"aws_waf_regex_match_set\" \"example\" {",
			"  name = \"example\"",
			"",
			"  regex_match_tuple {",
			"    field_to_match {",
			"      data = \"User-Agent\"",
			"      type = \"HEADER\"",
			"    }",
			"",
			"    regex_pattern_set_id = aws_waf_regex_pattern_set.example.id",
			"    text_transformation  = \"NONE\"",
			"  }",
			"}",
			"",
			"resource \"aws_waf_regex_pattern_set\" \"example\" {",
			"  name                  = \"example\"",
			"  regex_pattern_strings = [\"one\", \"two\"]",
			"}"
		]
	},
	"waf_regex_pattern_set": {
		"prefix": "waf_regex_pattern_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_regex_pattern_set",
			"resource \"aws_waf_regex_pattern_set\" \"example\" {",
			"  name                  = \"tf_waf_regex_pattern_set\"",
			"  regex_pattern_strings = [\"one\", \"two\"]",
			"}"
		]
	},
	"waf_size_constraint_set": {
		"prefix": "waf_size_constraint_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_size_constraint_set",
			"resource \"aws_waf_size_constraint_set\" \"size_constraint_set\" {",
			"  name = \"tfsize_constraints\"",
			"",
			"  size_constraints {",
			"    text_transformation = \"NONE\"",
			"    comparison_operator = \"EQ\"",
			"    size                = \"4096\"",
			"",
			"    field_to_match {",
			"      type = \"BODY\"",
			"    }",
			"  }",
			"}"
		]
	},
	"waf_sql_injection_match_set": {
		"prefix": "waf_sql_injection_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_sql_injection_match_set",
			"resource \"aws_waf_sql_injection_match_set\" \"sql_injection_match_set\" {",
			"  name = \"tf-sql_injection_match_set\"",
			"",
			"  sql_injection_match_tuples {",
			"    text_transformation = \"URL_DECODE\"",
			"",
			"    field_to_match {",
			"      type = \"QUERY_STRING\"",
			"    }",
			"  }",
			"}"
		]
	},
	"waf_web_acl": {
		"prefix": "waf_web_acl",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_web_acl",
			"resource \"aws_waf_web_acl\" \"example\" {",
			"  # ... other configuration ...",
			"  logging_configuration {",
			"    log_destination = aws_kinesis_firehose_delivery_stream.example.arn",
			"",
			"    redacted_fields {",
			"      field_to_match {",
			"        type = \"URI\"",
			"      }",
			"",
			"      field_to_match {",
			"        data = \"referer\"",
			"        type = \"HEADER\"",
			"      }",
			"    }",
			"  }",
			"}"
		]
	},
	"waf_xss_match_set": {
		"prefix": "waf_xss_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/waf_xss_match_set",
			"resource \"aws_waf_xss_match_set\" \"xss_match_set\" {",
			"  name = \"xss_match_set\"",
			"",
			"  xss_match_tuples {",
			"    text_transformation = \"NONE\"",
			"",
			"    field_to_match {",
			"      type = \"URI\"",
			"    }",
			"  }",
			"",
			"  xss_match_tuples {",
			"    text_transformation = \"NONE\"",
			"",
			"    field_to_match {",
			"      type = \"QUERY_STRING\"",
			"    }",
			"  }",
			"}"
		]
	},
	"wafregional_byte_match_set": {
		"prefix": "wafregional_byte_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_byte_match_set",
			"resource \"aws_wafregional_byte_match_set\" \"byte_set\" {",
			"  name = \"tf_waf_byte_match_set\"",
			"",
			"  byte_match_tuples {",
			"    text_transformation   = \"NONE\"",
			"    target_string         = \"badrefer1\"",
			"    positional_constraint = \"CONTAINS\"",
			"",
			"    field_to_match {",
			"      type = \"HEADER\"",
			"      data = \"referer\"",
			"    }",
			"  }",
			"}"
		]
	},
	"wafregional_geo_match_set": {
		"prefix": "wafregional_geo_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_geo_match_set",
			"resource \"aws_wafregional_geo_match_set\" \"geo_match_set\" {",
			"  name = \"geo_match_set\"",
			"",
			"  geo_match_constraint {",
			"    type  = \"Country\"",
			"    value = \"US\"",
			"  }",
			"",
			"  geo_match_constraint {",
			"    type  = \"Country\"",
			"    value = \"CA\"",
			"  }",
			"}"
		]
	},
	"wafregional_ipset": {
		"prefix": "wafregional_ipset",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_ipset",
			"resource \"aws_wafregional_ipset\" \"ipset\" {",
			"  name = \"tfIPSet\"",
			"",
			"  ip_set_descriptor {",
			"    type  = \"IPV4\"",
			"    value = \"192.0.7.0/24\"",
			"  }",
			"",
			"  ip_set_descriptor {",
			"    type  = \"IPV4\"",
			"    value = \"10.16.16.0/16\"",
			"  }",
			"}"
		]
	},
	"wafregional_regex_match_set": {
		"prefix": "wafregional_regex_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_regex_match_set",
			"resource \"aws_wafregional_regex_match_set\" \"example\" {",
			"  name = \"example\"",
			"",
			"  regex_match_tuple {",
			"    field_to_match {",
			"      data = \"User-Agent\"",
			"      type = \"HEADER\"",
			"    }",
			"",
			"    regex_pattern_set_id = aws_wafregional_regex_pattern_set.example.id",
			"    text_transformation  = \"NONE\"",
			"  }",
			"}",
			"",
			"resource \"aws_wafregional_regex_pattern_set\" \"example\" {",
			"  name                  = \"example\"",
			"  regex_pattern_strings = [\"one\", \"two\"]",
			"}"
		]
	},
	"wafregional_regex_pattern_set": {
		"prefix": "wafregional_regex_pattern_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_regex_pattern_set",
			"resource \"aws_wafregional_regex_pattern_set\" \"example\" {",
			"  name                  = \"example\"",
			"  regex_pattern_strings = [\"one\", \"two\"]",
			"}"
		]
	},
	"wafregional_size_constraint_set": {
		"prefix": "wafregional_size_constraint_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_size_constraint_set",
			"resource \"aws_wafregional_size_constraint_set\" \"size_constraint_set\" {",
			"  name = \"tfsize_constraints\"",
			"",
			"  size_constraints {",
			"    text_transformation = \"NONE\"",
			"    comparison_operator = \"EQ\"",
			"    size                = \"4096\"",
			"",
			"    field_to_match {",
			"      type = \"BODY\"",
			"    }",
			"  }",
			"}"
		]
	},
	"wafregional_sql_injection_match_set": {
		"prefix": "wafregional_sql_injection_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_sql_injection_match_set",
			"resource \"aws_wafregional_sql_injection_match_set\" \"sql_injection_match_set\" {",
			"  name = \"tf-sql_injection_match_set\"",
			"",
			"  sql_injection_match_tuple {",
			"    text_transformation = \"URL_DECODE\"",
			"",
			"    field_to_match {",
			"      type = \"QUERY_STRING\"",
			"    }",
			"  }",
			"}"
		]
	},
	"wafregional_web_acl": {
		"prefix": "wafregional_web_acl",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_web_acl",
			"resource \"aws_wafregional_web_acl\" \"example\" {",
			"  name        = \"example\"",
			"  metric_name = \"example\"",
			"",
			"  default_action {",
			"    type = \"ALLOW\"",
			"  }",
			"",
			"  rule {",
			"    priority = 1",
			"    rule_id  = aws_wafregional_rule_group.example.id",
			"    type     = \"GROUP\"",
			"",
			"    override_action {",
			"      type = \"NONE\"",
			"    }",
			"  }",
			"}"
		]
	},
	"wafregional_xss_match_set": {
		"prefix": "wafregional_xss_match_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_xss_match_set",
			"resource \"aws_wafregional_xss_match_set\" \"xss_match_set\" {",
			"  name = \"xss_match_set\"",
			"",
			"  xss_match_tuple {",
			"    text_transformation = \"NONE\"",
			"",
			"    field_to_match {",
			"      type = \"URI\"",
			"    }",
			"  }",
			"",
			"  xss_match_tuple {",
			"    text_transformation = \"NONE\"",
			"",
			"    field_to_match {",
			"      type = \"QUERY_STRING\"",
			"    }",
			"  }",
			"}"
		]
	},
	"wafv2_ip_set": {
		"prefix": "wafv2_ip_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafv2_ip_set",
			"resource \"aws_wafv2_ip_set\" \"example\" {",
			"  name               = \"example\"",
			"  description        = \"Example IP set\"",
			"  scope              = \"REGIONAL\"",
			"  ip_address_version = \"IPV4\"",
			"  addresses          = [\"1.2.3.4/32\", \"5.6.7.8/32\"]",
			"",
			"  tags = {",
			"    Tag1 = \"Value1\"",
			"    Tag2 = \"Value2\"",
			"  }",
			"}"
		]
	},
	"wafv2_regex_pattern_set": {
		"prefix": "wafv2_regex_pattern_set",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafv2_regex_pattern_set",
			"resource \"aws_wafv2_regex_pattern_set\" \"example\" {",
			"  name        = \"example\"",
			"  description = \"Example regex pattern set\"",
			"  scope       = \"REGIONAL\"",
			"",
			"  regular_expression {",
			"    regex_string = \"one\"",
			"  }",
			"",
			"  regular_expression {",
			"    regex_string = \"two\"",
			"  }",
			"",
			"  tags = {",
			"    Tag1 = \"Value1\"",
			"    Tag2 = \"Value2\"",
			"  }",
			"}"
		]
	},
	"wafv2_rule_group": {
		"prefix": "wafv2_rule_group",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafv2_rule_group",
			"resource \"aws_wafv2_rule_group\" \"example\" {",
			"  name     = \"example-rule\"",
			"  scope    = \"REGIONAL\"",
			"  capacity = 2",
			"",
			"  rule {",
			"    name     = \"rule-1\"",
			"    priority = 1",
			"",
			"    action {",
			"      allow {}",
			"    }",
			"",
			"    statement {",
			"",
			"      geo_match_statement {",
			"        country_codes = [\"US\", \"NL\"]",
			"      }",
			"    }",
			"",
			"    visibility_config {",
			"      cloudwatch_metrics_enabled = false",
			"      metric_name                = \"friendly-rule-metric-name\"",
			"      sampled_requests_enabled   = false",
			"    }",
			"  }",
			"",
			"  visibility_config {",
			"    cloudwatch_metrics_enabled = false",
			"    metric_name                = \"friendly-metric-name\"",
			"    sampled_requests_enabled   = false",
			"  }",
			"}"
		]
	},
	"wafv2_web_acl": {
		"prefix": "wafv2_web_acl",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafv2_web_acl",
			"resource \"aws_wafv2_web_acl\" \"example\" {",
			"  name        = \"managed-rule-example\"",
			"  description = \"Example of a managed rule.\"",
			"  scope       = \"REGIONAL\"",
			"",
			"  default_action {",
			"    allow {}",
			"  }",
			"",
			"  rule {",
			"    name     = \"rule-1\"",
			"    priority = 1",
			"",
			"    override_action {",
			"      count {}",
			"    }",
			"",
			"    statement {",
			"      managed_rule_group_statement {",
			"        name        = \"AWSManagedRulesCommonRuleSet\"",
			"        vendor_name = \"AWS\"",
			"",
			"        rule_action_override {",
			"          action_to_use {",
			"            count {}",
			"          }",
			"",
			"          name = \"SizeRestrictions_QUERYSTRING\"",
			"        }",
			"",
			"        rule_action_override {",
			"          action_to_use {",
			"            count {}",
			"          }",
			"",
			"          name = \"NoUserAgent_HEADER\"",
			"        }",
			"",
			"        scope_down_statement {",
			"          geo_match_statement {",
			"            country_codes = [\"US\", \"NL\"]",
			"          }",
			"        }",
			"      }",
			"    }",
			"",
			"    token_domains = [\"mywebsite.com\", \"myotherwebsite.com\"]",
			"",
			"    visibility_config {",
			"      cloudwatch_metrics_enabled = false",
			"      metric_name                = \"friendly-rule-metric-name\"",
			"      sampled_requests_enabled   = false",
			"    }",
			"  }",
			"",
			"  tags = {",
			"    Tag1 = \"Value1\"",
			"    Tag2 = \"Value2\"",
			"  }",
			"",
			"  visibility_config {",
			"    cloudwatch_metrics_enabled = false",
			"    metric_name                = \"friendly-metric-name\"",
			"    sampled_requests_enabled   = false",
			"  }",
			"}"
		]
	},
	"wafv2_web_acl_logging_configuration": {
		"prefix": "wafv2_web_acl_logging_configuration",
		"body": [
			"# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafv2_web_acl_logging_configuration",
			"resource \"aws_wafv2_web_acl_logging_configuration\" \"example\" {",
			"  log_destination_configs = [aws_kinesis_firehose_delivery_stream.example.arn]",
			"  resource_arn            = aws_wafv2_web_acl.example.arn",
			"  redacted_fields {",
			"    single_header {",
			"      name = \"user-agent\"",
			"    }",
			"  }",
			"}"
		]
	}
}
